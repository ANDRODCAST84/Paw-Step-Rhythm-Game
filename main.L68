00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 9/18/2025 5:55:31 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Main
00000000                             3  * Written by : Albert Castrejon
00000000                             4  * Date       : 5/30/25
00000000                             5  * Description: Main file that will run all of the game loops
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8      
00001000                             9      INCLUDE     "Equates.X68"
00001000                            10  ; Data Sizes
00001000  =00000004                 11  BYTES_IN_LONG               EQU 4
00001000  =00000008                 12  BITS_IN_BYTE                EQU 8
00001000  =00000010                 13  BITS_IN_WORD                EQU 16
00001000  =0000003C                 14  BYTES_IN_ALL_REG            EQU BYTES_IN_LONG*15
00001000  =00000004                 15  BYTES_IN_SEGMENT_PARAMS     EQU 4
00001000                            16  
00001000                            17  ALL_REG                     REG d0-d7/a0-a6
00001000  =FFFFFFFC                 18  RETURN                      EQU -BYTES_IN_LONG    ; Always place function returns on top of stack
00001000                            19                                                      ; right on top of jsr return address
00001000  =00000001                 20  DBRA_ADJUSTMENT             EQU 1
00001000                            21  
00001000  =00000008                 22  FIXED_POINT_BITS            EQU 8
00001000                            23  
00001000  =00000000                 24  TOP_LEFT                    EQU 0
00001000  =00000000                 25  LEFT_SCREEN_MARGIN          EQU 0
00001000  =00000280                 26  SCREEN_WIDTH                EQU 640
00001000  =000001E0                 27  SCREEN_HEIGHT               EQU 480
00001000                            28  
00001000                            29  ; Time commands
00001000  =00000008                 30  GET_TIME_TASK               EQU 8
00001000  =00000017                 31  DELAY_TASK                  EQU 23
00001000                            32  
00001000                            33  ; Input commands
00001000  =00000004                 34  INPUT_NUM_TASK              EQU 4
00001000  =00000013                 35  KEY_INPUT_TASK              EQU 19
00001000  =0000FFFF                 36  KEY_INPUT_TIMEOUT           EQU $FFFF
00001000                            37  
00001000                            38  ; Print commands
00001000  =0000000B                 39  SET_CURSOR_TASK             EQU 11
00001000  =0000000D                 40  PRINT_CR_LF_TASK            EQU 13
00001000  =00000014                 41  PRINT_SIGNED_NUMBER_TASK    EQU 20
00001000  =00000015                 42  SET_FONT_PROPERTIES_TASK    EQU 21
00001000                            43  
00001000                            44  ; File commands
00001000  =00000032                 45  CLOSE_ALL_FILES_TASK        EQU 50
00001000  =00000033                 46  OPEN_EXISTING_FILE_TASK     EQU 51
00001000  =00000034                 47  OPEN_NEW_FILE_TASK          EQU 52
00001000  =00000037                 48  POSITION_FILE_TASK          EQU 55
00001000  =00000035                 49  READ_FILE_TASK              EQU 53
00001000  =00000036                 50  WRITE_FILE_TASK             EQU 54
00001000  =00000038                 51  CLOSE_FILE_TASK             EQU 56
00001000  =00000039                 52  DELETE_FILE_TASK            EQU 57
00001000  =FFFFFFFF                 53  FILE_NOT_FOUND              EQU $FFFFFFFF
00001000  =00000014                 54  EMPTY_FILE_LENGTH           EQU 20
00001000                            55  
00001000                            56  ; Sounds commands
00001000  =00000049                 57  PLAY_SOUND_DIRECTX_TASK     EQU 73
00001000  =0000004A                 58  LOAD_DIRECTX_SOUND_TASK     EQU 74
00001000  =0000004B                 59  PLAY_LOADED_DIRECTX_TASK    EQU 75
00001000  =0000004D                 60  CONTROL_DIRECTX_PLAYER_TASK EQU 77
00001000  =00000000                 61  PLAY_SOUND_ONCE             EQU 0
00001000  =00000002                 62  STOP_REFERENCED_SOUND       EQU 2
00001000  =00000003                 63  STOP_ALL_SOUNDS             EQU 3
00001000                            64  
00001000  =00000000                 65  CHOSEN_SONG_LOAD_NUMBER     EQU 0
00001000  =0000000A                 66  CASSETTE_START_LOAD_NUMBER  EQU 10
00001000                            67  
00001000                            68  ; Graphics Commands
00001000  =00000021                 69  SIZE_WINDOW_TASK            EQU 33
00001000  =0000005D                 70  SET_PEN_WIDTH_TASK          EQU 93
00001000  =00000050                 71  SET_PEN_COLOR_TASK          EQU 80
00001000  =00000051                 72  SET_PEN_FILL_COLOR_TASK     EQU 81
00001000  =0000000B                 73  CLEAR_SCREEN_TASK           EQU 11
00001000  =0000FF00                 74  CLEAR_SCREEN_CODE           EQU $FF00
00001000  =00000052                 75  DRAW_PIXEL_TASK             EQU 82
00001000  =00000054                 76  DRAW_LINE_START_END_TASK    EQU 84
00001000  =00000057                 77  DRAW_RECT_TASK              EQU 87
00001000  =0000005A                 78  DRAW_UNFILLED_RECT_TASK     EQU 90
00001000  =00000057                 79  DRAW_FILLED_OVAL_TASK       EQU 87
00001000  =0000005C                 80  SET_DRAWING_MODE_TASK       EQU 92
00001000  =00000011                 81  ENABLE_DOUBLE_BUFFER_CODE   EQU 17
00001000  =0000005E                 82  PAINT_BUFFER_SCREEN_TASK    EQU 94
00001000  =00000059                 83  FLOOD_FILL_TASK             EQU 89
00001000  =0000005F                 84  PRINT_STRING_PIXEL_POS_TASK EQU 95
00001000                            85  
00001000                            86  ; Colors
00001000  =00FFFFFF                 87  WHITE                       EQU $FFFFFF
00001000  =00000000                 88  BLACK                       EQU $000000
00001000  =000000FF                 89  TERRIBLE_COLOR              EQU $0000FF
00001000  =000054FF                 90  BAD_COLOR                   EQU $0054FF
00001000  =0000A8FF                 91  MEDIOCRE_COLOR              EQU $00A8FF
00001000  =0000FFFF                 92  DECENT_COLOR                EQU $00FFFF
00001000  =0000FF99                 93  GOOD_COLOR                  EQU $00FF99
00001000  =0000FF00                 94  EXCELLENT_COLOR             EQU $00FF00
00001000  =00FFFF00                 95  MAX_COLOR                   EQU $FFFF00
00001000                            96  
00001000                            97  
00001000  =00FF3F3F                 98  LANE1_HAMMER_COLOR          EQU $FF3F3F
00001000  =003FFF43                 99  LANE2_HAMMER_COLOR          EQU $3FFF43
00001000  =00433FFF                100  LANE3_HAMMER_COLOR          EQU $433FFF
00001000  =000075FF                101  LANE4_HAMMER_COLOR          EQU $0075FF
00001000  =0000FFFF                102  LANE5_HAMMER_COLOR          EQU $00FFFF
00001000                           103  
00001000  =00323232                104  PROGRESS_BACKGROUND_COLOR   EQU $323232
00001000  =00FFFFFF                105  PROGRESS_FILL_COLOR         EQU WHITE
00001000                           106  
00001000  =00BE6D38                107  SEVEN_SEGMENT_NUMBER_COLOR  EQU $BE6D38
00001000  =00361F10                108  SEVEN_SEGMENT_BACKGROUND_COLOR EQU $361F10
00001000                           109  
00001000                           110  ; Keycodes  
00001000  =00000030                111  START_OF_ASCII_NUMBERS      EQU $30
00001000  =00000027                112  APOSTROPHE                  EQU $27
00001000                           113  
00001000                           114  ; Shapes
00001000  =00000032                115  PLAY_AREA_LEFT_X            EQU 50
00001000  =0000014A                116  PLAY_AREA_RIGHT_X           EQU 330
00001000  =00000000                117  PLAY_AREA_TOP_Y             EQU 0
00001000  =0000017B                118  PLAY_AREA_BOTTOM_Y          EQU 379
00001000  =00000005                119  PLAY_AREA_BORDER_WIDTH      EQU 5
00001000                           120  
00001000  =00000032                121  QUARTER_LINE_X1             EQU PLAY_AREA_LEFT_X
00001000  =0000014A                122  QUARTER_LINE_X2             EQU PLAY_AREA_RIGHT_X
00001000                           123  
00001000  =00000019                124  NOTE_SIZE                   EQU 25
00001000  =00000028                125  NOTE_WIDTH                  EQU 40
00001000                           126  
00001000  =00000032                127  TARGET_LINE_X1              EQU PLAY_AREA_LEFT_X
00001000  =0000014A                128  TARGET_LINE_X2              EQU PLAY_AREA_RIGHT_X
00001000  =00000156                129  TARGET_LINE_Y               EQU PLAY_AREA_BOTTOM_Y-((NOTE_SIZE*3)/2)
00001000                           130  
00001000  =FFFFFFDB                131  NOTE_SPAWN_Y                EQU TARGET_LINE_Y-PLAY_AREA_BOTTOM_Y
00001000                           132  
00001000  =00003FFF                133  MAX_NOTES                   EQU ($FFFF/4)           ; Max possible in word
00001000  =0000000C                134  MAX_SONGS_INDEX             EQU 3*BYTES_IN_LONG     ; 4 Total songs minus one 
00001000                           135  
00001000  =00000060                136  LANE1_X                     EQU 96
00001000  =0000008E                137  LANE2_X                     EQU 142
00001000  =000000BC                138  LANE3_X                     EQU 188
00001000  =000000EA                139  LANE4_X                     EQU 234
00001000  =00000118                140  LANE5_X                     EQU 280
00001000  =00000156                141  HAMMER_Y                    EQU TARGET_LINE_Y
00001000                           142  
00001000  =0000002E                143  LANE_OFFSET                 EQU 46
00001000                           144  
00001000  =00000244                145  PROGRESS_BAR_LEFT_X         EQU 580
00001000  =00000276                146  PROGRESS_BAR_RIGHT_X        EQU 630
00001000  =0000000A                147  PROGRESS_BAR_TOP_Y          EQU 10
00001000  =00000177                148  PROGRESS_BAR_BOTTOM_Y       EQU 375
00001000                           149  
00001000  =00000016                150  SEGMENT_LENGTH              EQU 22
00001000  =00000005                151  SEGMENT_WIDTH               EQU 5
00001000  =00000247                152  SEGMENT_ONES_PLACE_POS_X    EQU 583
00001000  =000001AE                153  SEGMENT_ONES_PLACE_POS_Y    EQU 430
00001000  =00000023                154  SEGMENT_PLACE_X_OFFSET      EQU 35
00001000  =0000000A                155  SEGMENT_NUMBER_BASE         EQU 10
00001000  =00000005                156  SEGMENT_BACKGROUND_PADDING  EQU SEGMENT_WIDTH
00001000                           157  
00001000  =000000CD                158  SONG_NAME_POS_X             EQU 205
00001000  =00000131                159  SONG_NAME_POS_Y             EQU 305
00001000                           160  
00001000  =000000E6                161  PERCENT_POS_X               EQU 230
00001000  =00000181                162  PERCENT_POS_Y               EQU 385
00001000                           163  
00001000  =0000014A                164  STATS_OUTER_BOX_WIDTH       EQU 330
00001000  =0000014A                165  STATS_OUTER_BOX_HEIGHT      EQU 330
00001000  =0000012C                166  STATS_INNER_BOX_WIDTH       EQU 300
00001000  =000000B4                167  STATS_INNER_BOX_HEIGHT      EQU 180
00001000  =00000014                168  STATS_BOXES_TOP_PADDING     EQU 20
00001000                           169  
00001000                           170  ; Fonts and text
00001000  =00BF6D35                171  STATS_FONT_COLOR            EQU $00bf6d35
00001000  =04140001                172  STATS_INNER_FONT_STYLE      EQU $04140001
00001000                           173  
00001000  =00000005                174  STAT_STRING_AMOUNT          EQU 5
00001000                           175  
00001000  =00000008                176  STATS_INNER_TEXT_PADDING    EQU 8
00001000  =00000006                177  STATS_INNER_TEXT_TOP_PAD    EQU 6
00001000  =000000AA                178  STATS_INNER_TEXT_X          EQU SCREEN_WIDTH/2-(STATS_INNER_BOX_WIDTH/2)
00001000  =00000065                179  STATS_INNER_TEXT_Y          EQU SCREEN_HEIGHT/2-(STATS_OUTER_BOX_HEIGHT/2)+STATS_BOXES_TOP_PADDING+STATS_INNER_TEXT_TOP_PAD
00001000  =00000037                180  STATS_INNER_TEXT_LINE_SIZE  EQU 55
00001000                           181  
00001000  =00000004                182  STATS_INNER_NUMBER_Y        EQU 4
00001000  =00000018                183  STATS_INNER_NUMBER_X        EQU 24
00001000  =00000002                184  STATS_INNER_NUMBER_Y_OFFSET EQU 2
00001000  =00000003                185  STATS_INNER_NUMBER_COLUMNS  EQU 3
00001000                           186  
00001000  =04090001                187  STATS_OUTER_FONT_STYLE      EQU $04090001
00001000  =000000AA                188  STATS_OUTER_TEXT_X          EQU SCREEN_WIDTH/2-150
00001000  =00000186                189  STATS_OUTER_TEXT_Y          EQU SCREEN_HEIGHT/2+150
00001000  =00000050                190  LEVEL_SELECT_OFFSET         EQU 80
00001000  =000000C8                191  EXIT_GAME_OFFSET            EQU 200
00001000                           192  
00001000  =000000AA                193  COMPLETION_TEXT_X           EQU SCREEN_WIDTH/2-150
00001000  =00000172                194  COMPLETION_TEXT_Y           EQU SCREEN_HEIGHT/2+130
00001000                           195  
00001000  =000000AA                196  HIGHSCORE_TEXT_X            EQU COMPLETION_TEXT_X
00001000  =00000163                197  HIGHSCORE_TEXT_Y            EQU COMPLETION_TEXT_Y-15
00001000                           198  
00001000  =00000012                199  COMPLETION_PERCENT_OFFSET   EQU 18
00001000                           200  
00001000  =04080001                201  MAIN_MENU_FONT_STYLE        EQU $04080001
00001000                           202  
00001000  =00000096                203  EXIT_TEXT_OFFSET            EQU 150
00001000                           204  
00001000                           205  ; Physics
00001000  =FFFFFA00                206  GATO_JUMP_ACCELERATION      EQU $FFFFFA00 ; -$6.00 = -600 pixels per second or -6 pixels per centisec
00001000  =00000001                207  GRAVITY_ACCELERATION        EQU $001
00001000                           208  
00001000                           209  
00001000                           210  ; Inputs                                ;11223344  
00001000  =31323334                211  LEVEL_TARGET_INPUTS                 EQU $31323334  
00001000  =00000018                212  ONE_PRESSED_BIT_OFFSET              EQU 24
00001000  =00000010                213  TWO_PRESSED_BIT_OFFSET              EQU 16
00001000  =00000008                214  THREE_PRESSED_BIT_OFFSET            EQU 8
00001000  =00000000                215  FOUR_PRESSED_BIT_OFFSET             EQU 0
00001000                           216  
00001000  =00000035                217  FIVE_PRESSED_INPUT                  EQU $35
00001000                           218  
00001000                           219  
00001000                           220  ; Performance States
00001000  =00000000                221  PERFORMANCE_LOST                    EQU 0
00001000  =00000001                222  PERFORMANCE_TERRIBLE                EQU 1
00001000  =00000002                223  PERFORMANCE_BAD                     EQU 2
00001000  =00000003                224  PERFORMANCE_MEDIOCRE                EQU 3
00001000  =00000004                225  PERFORMANCE_DECENT                  EQU 4
00001000  =00000005                226  PERFORMANCE_GOOD                    EQU 5
00001000  =00000006                227  PERFORMANCE_EXCELLENT               EQU 6
00001000  =00000007                228  MAX_PERFORMANCE                     EQU 7
00001000                           229  
00001000  =0000000A                230  MAX_PERFORMANCE_MODIFIER            EQU 10
00001000  =00000002                231  NEGATIVE_MODIFIER_INCREMENT         EQU 2
00001000  =00000002                232  POSITIVE_MODIFIER_INCREMENT         EQU 2
00001000                           233  
00001000  =00000014                234  PERFORMANCE_STATE_SCORE_SIZE        EQU 20        ; How much score each state take up
00001000                           235  
00001000                           236  
00001000                           237  
00001000                           238  ; Supported file type and format
00001000  =534F4E44                239  SOUND_FILE_SIGNATURE                EQU 'SOND'
00001000  =00000090                240  NOTE_PRESSED_EVENT                  EQU $90
00001000                           241  
00001000                           242  ; Sound file offsets
00001000  =00000004                243  OFFSET_SOUND_QUARTER_NOTE_TICKS     EQU 4
00001000  =00000006                244  OFFSET_SOUND_TEMPO                  EQU 6
00001000  =0000000A                245  OFFSET_EVENTS_AMOUNT                EQU 10
00001000  =0000000C                246  OFFSET_KEYPRESS_AMOUNT              EQU 12
00001000  =0000000E                247  OFFSET_START_NOTE_EVENTS            EQU 14
00001000                           248  
00001000                           249  ; Bitmaps
00001000  =0000424D                250  FILE_SIGNATURE              EQU 'BM'
00001000                           251  
00001000  =0000000A                252  OFFSET_PIXELARRAY_OFFSET    EQU 10
00001000  =0000001C                253  OFFSET_BITSPERPIXEL         EQU $1C
00001000  =00000012                254  OFFSET_BITMAP_WIDTH         EQU $12
00001000  =00000016                255  OFFSET_BITMAP_HEIGHT        EQU $16
00001000                           256  
00001000  =00000010                257  BITMAP_CHUNK_PARAM_SIZE     EQU 16
00001000                           258  
00001000  =0000002D                259  WIN_LOSS_STICKER_HEIGHT     EQU 45
00001000  =00000023                260  WIN_LOSS_STICKER_WIDTH      EQU 35
00001000  =01B30159                261  WIN_LOSS_STICKER_SCREEN_POS EQU (435<<16)+345
00001000                           262  
00001000  =00000008                263  GATO_MAX_FRAMES             EQU 8
00001000  =00000022                264  GATO_CHUNK_WIDTH            EQU 34
00001000  =00000020                265  GATO_CHUNK_HEIGHT           EQU 32
00001000  =0000003C                266  GATO_FULL_WIDTH             EQU 60
00001000  =0000003A                267  GATO_FULL_HEIGHT            EQU 58
00001000  =00000000                268  GATO_START_POS              EQU 0
00001000  =015E0177                269  GATO_SCREEN_START_POS       EQU (350<<16)+375
00001000                           270  
00001000  =015E0177                271  BACKGROUND_FILL_POS_1       EQU GATO_SCREEN_START_POS
00001000  =0000000D                272  BACKGROUND_FILL_WIDTH_1     EQU 13
00001000  =00000020                273  BACKGROUND_FILL_HEIGHT_1    EQU 32
00001000                           274  
00001000  =016B0177                275  BACKGROUND_FILL_POS_2       EQU GATO_SCREEN_START_POS+(BACKGROUND_FILL_WIDTH_1<<16)
00001000  =00000015                276  BACKGROUND_FILL_WIDTH_2     EQU 21
00001000  =00000008                277  BACKGROUND_FILL_HEIGHT_2    EQU 8
00001000                           278  
00001000  =0177017F                279  BACKGROUND_FILL_POS_3       EQU BACKGROUND_FILL_POS_2+BACKGROUND_FILL_HEIGHT_2+(12<<16)
00001000  =00000009                280  BACKGROUND_FILL_WIDTH_3     EQU 9
00001000  =00000013                281  BACKGROUND_FILL_HEIGHT_3    EQU 19
00001000                           282  
00001000  =00000034                283  MAD_GATO_HEIGHT             EQU 52
00001000  =00000049                284  MAD_GATO_WIDTH              EQU 73
00001000  =0000003E                285  MAD_GATO_BACKGROUND_HEIGHT  EQU 62
00001000                           286  
00001000  =000000D8                287  END_BANNER_WIDTH            EQU 216
00001000  =0000005A                288  END_BANNER_HEIGHT           EQU 90
00001000  =00D40005                289  END_BANNER_POS              EQU (((SCREEN_WIDTH/2)-(END_BANNER_WIDTH/2))<<16)+5
00001000                           290  
00001000                           291  
00001000  =01860163                292  DIFFICUTLY_SKULL_POS        EQU (390<<16)+355
00001000                           293  
00001000  =00000022                294  DIFFICULTY_SKULL_WIDTH      EQU 34
00001000  =0000002C                295  DIFFICULTY_SKULL_HEIGHT     EQU 44
00001000  =00000002                296  DIFFICULTY_SKULL_PADDING    EQU 2
00001000                           297  
00001000  =00000205                298  EXIT_IMAGE_WIDTH            EQU 517
00001000  =000001E0                299  EXIT_IMAGE_HEIGHT           EQU 480
00001000  =003E0000                300  EXIT_IMAGE_POS              EQU (SCREEN_WIDTH/2-EXIT_IMAGE_WIDTH/2)<<16+0
00001000                           301  
00001000                           302  
00001000                           303  
00001000                           304  
00001000                           305  
00001000                           306  
00001000                           307  
00001000                           308  
00001000                           309  
00001000                           310  
00001000                           311  -------------------- end include --------------------
00001000                           312      
00001000                           313  START:
00001000  4EB9 000010DA            314      jsr     INITIALIZE_GAME
00001006                           315      
00001006                           316  RUN_TITLE_LOOP:
00001006  4EB9 00001186            317      jsr     TITLE_LOOP
0000100C  0C39 0001 00002806       318      cmp.b   #1, (ReadyForGame)
00001014  66F0                     319      bne     RUN_TITLE_LOOP                      ; Branch if not ready to start game (no song selected)
00001016                           320       
00001016                           321  REPLAY_SONG:
00001016  4EB9 00001382            322      jsr     INITIALIZE_SOUNDS 
0000101C  4EB9 000014BA            323      jsr     LOAD_LEVEL
00001022                           324      
00001022                           325  RUN_MAIN_GAME_LOOP: 
00001022  4EB9 000022D6            326      jsr     GET_DELTA_TIME
00001028  4EB9 00001582            327      jsr     LEVEL_LOOP
0000102E                           328      
0000102E                           329      ; Ensure Delta time
0000102E  7017                     330      move.l  #DELAY_TASK, d0
00001030  7201                     331      moveq.l #1, d1
00001032  4E4F                     332      trap    #15
00001034                           333      
00001034  0C39 0001 00002807       334      cmp.b   #1, (SongFinished)
0000103C  66E4                     335      bne     RUN_MAIN_GAME_LOOP                  ; Branch if song not finished
0000103E                           336      
0000103E  0CB9 00000001 0000280C   337      cmp.l   #1, (SongFailed)
00001048  6700 0054                338      beq     RUN_END_GAME_LOOP                   ; Branch and skip if song failed
0000104C                           339      
0000104C                           340      ; Start the song ending sequence
0000104C  4EB9 00001B9A            341      jsr     SONG_ENDING_SEQUENCE
00001052                           342      
00001052                           343      ; Display Win sticker
00001052  2F3C 01B30159            344      move.l  #WIN_LOSS_STICKER_SCREEN_POS, -(sp) ; Screen start Position
00001058  3F3C 002D                345      move.w  #WIN_LOSS_STICKER_HEIGHT, -(sp)     ; Chunk height
0000105C  3F3C 0023                346      move.w  #WIN_LOSS_STICKER_WIDTH, -(sp)      ; Chunk width
00001060  2F3C 00000000            347      move.l  #TOP_LEFT, -(sp)                    ; Chunk start Position
00001066  2F3C 00267FBC            348      move.l  #WinSticker, -(sp)                  ; Bitmap Address 
0000106C  4EB9 0000232A            349      jsr     DRAW_BITMAP_CHUNK
00001072  4FEF 0010                350      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp     ; Fix stack
00001076                           351      
00001076                           352      ; Display Win banner
00001076  2F3C 00D40005            353      move.l  #END_BANNER_POS, -(sp)              ; Screen start Position
0000107C  3F3C 005A                354      move.w  #END_BANNER_HEIGHT, -(sp)           ; Chunk height
00001080  3F3C 00D8                355      move.w  #END_BANNER_WIDTH, -(sp)            ; Chunk width
00001084  2F3C 00000000            356      move.l  #TOP_LEFT, -(sp)                    ; Chunk start Position
0000108A  2F3C 00283BF0            357      move.l  #WinBanner, -(sp)                   ; Bitmap Address 
00001090  4EB9 0000232A            358      jsr     DRAW_BITMAP_CHUNK
00001096  4FEF 0010                359      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp     ; Fix stack
0000109A                           360      
0000109A                           361      ;Update Screen
0000109A  705E                     362      moveq.l #PAINT_BUFFER_SCREEN_TASK, d0
0000109C  4E4F                     363      trap    #15
0000109E                           364      
0000109E                           365  RUN_END_GAME_LOOP:
0000109E  4EB9 00001D48            366      jsr     END_GAME_LOOP
000010A4                           367      
000010A4  0CB9 00000001 00002810   368      cmp.l   #1, (RetrySong)
000010AE  6700 FF66                369      beq     REPLAY_SONG                         ; Branch if replay song selected
000010B2  0CB9 00000001 00002814   370      cmp.l   #1, (LevelSelect)
000010BC  6700 FF42                371      beq     START                               ; Branch if song select selected
000010C0  0CB9 00000000 00002818   372      cmp.l   #0, (ExitGame)
000010CA  67D2                     373      beq     RUN_END_GAME_LOOP                   ; Branch if Exit game NOT selected
000010CC                           374      
000010CC                           375      
000010CC                           376      ; Load Exit string
000010CC  700B                     377      move.l  #CLEAR_SCREEN_TASK, d0
000010CE  223C 0000FF00            378      move.l  #CLEAR_SCREEN_CODE, d1
000010D4  4E4F                     379      trap    #15
000010D6                           380      
000010D6  FFFF FFFF                381      SIMHALT
000010DA                           382      
000010DA                           383      
000010DA                           384      
000010DA                           385      INCLUDE     "InitGame.X68"
000010DA                           386  
000010DA                           387  INITIALIZE_GAME:
000010DA                           388      ; Turn on double buffering
000010DA  705C                     389      moveq.l #SET_DRAWING_MODE_TASK, d0
000010DC  7211                     390      moveq.l #ENABLE_DOUBLE_BUFFER_CODE, d1
000010DE  4E4F                     391      trap    #15
000010E0                           392      
000010E0  4EB9 000022F0            393      jsr     GENERATE_RANDOM_NUMBER_SEED
000010E6                           394      
000010E6                           395      ; Print "Loading" to screen
000010E6  700D                     396      moveq.l #PRINT_CR_LF_TASK, d0
000010E8  43F9 0000157A            397      lea     LoadingString, a1
000010EE  4E4F                     398      trap    #15
000010F0                           399  
000010F0                           400      ;Update Screen
000010F0  705E                     401      moveq.l #PAINT_BUFFER_SCREEN_TASK, d0
000010F2  4E4F                     402      trap    #15
000010F4                           403      
000010F4                           404      ; Draw Title image
000010F4  2F3C 00000000            405      move.l  #TOP_LEFT, -(sp)                ; Screen start Position
000010FA  3F3C 01E0                406      move.w  #SCREEN_HEIGHT, -(sp)           ; Chunk height
000010FE  3F3C 0280                407      move.w  #SCREEN_WIDTH, -(sp)            ; Chunk width
00001102  2F3C 00000000            408      move.l  #TOP_LEFT, -(sp)                ; Chunk start Position
00001108  2F3C 0013A60C            409      move.l  #TitleImage, -(sp)              ; Bitmap Address 
0000110E  4EB9 0000232A            410      jsr     DRAW_BITMAP_CHUNK
00001114  4FEF 0010                411      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp ; Fix stack
00001118                           412      
00001118                           413      ; Set font
00001118  7015                     414      move.l  #SET_FONT_PROPERTIES_TASK, d0
0000111A  223C 00BF6D35            415      move.l  #STATS_FONT_COLOR, d1
00001120  243C 04080001            416      move.l  #MAIN_MENU_FONT_STYLE, d2
00001126  4E4F                     417      trap    #15
00001128                           418      
00001128                           419      ; Print first song
00001128  705F                     420      move.l  #PRINT_STRING_PIXEL_POS_TASK, d0
0000112A  43F9 000029D5            421      lea     PonderTheNightName, a1
00001130  223C 000000CD            422      move.l  #SONG_NAME_POS_X, d1
00001136  243C 00000131            423      move.l  #SONG_NAME_POS_Y, d2
0000113C  4E4F                     424      trap    #15
0000113E                           425      
0000113E                           426      ; Set selected first song
0000113E  23FC 00000000 00004694   427      move.l  #0, (CurrentChoiceIndex)
00001148  23FC 00002A43 00004698   428      move.l  #PonderTheNightString, (ChosenSong)
00001152  23FC 000036D6 0000469C   429      move.l  #PonderTheNightSound, (ChosenSound)
0000115C                           430      
0000115C                           431      ; Display Difficulty
0000115C  2F3C 01860163            432      move.l  #DIFFICUTLY_SKULL_POS, -(sp)        ; Screen start Position
00001162  3F3C 002C                433      move.w  #DIFFICULTY_SKULL_HEIGHT, -(sp)     ; Chunk height
00001166  3F3C 0022                434      move.w  #DIFFICULTY_SKULL_WIDTH, -(sp)      ; Chunk width
0000116A  2F3C 00000000            435      move.l  #TOP_LEFT, -(sp)                    ; Chunk start Position
00001170  2F3C 00296C3A            436      move.l  #DifficultySkull, -(sp)             ; Bitmap Address 
00001176  4EB9 0000232A            437      jsr     DRAW_BITMAP_CHUNK
0000117C  4FEF 0010                438      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp     ; Fix stack
00001180                           439      
00001180                           440      ;Update Screen
00001180  705E                     441      moveq.l #PAINT_BUFFER_SCREEN_TASK, d0
00001182  4E4F                     442      trap    #15
00001184                           443      
00001184                           444  
00001184  4E75                     445      rts
00001186                           446  
00001186                           447  
00001186                           448  
00001186                           449  
00001186                           450  
00001186                           451  
00001186                           452  
00001186                           453  
00001186                           454  
00001186                           455  
00001186                           456  
00001186                           457  
00001186                           458  
00001186                           459  
00001186                           460  
00001186                           461  
00001186                           462  
00001186                           463  
00001186                           464  
00001186                           465  
00001186                           466  
00001186                           467  
00001186                           468  -------------------- end include --------------------
00001186                           469      INCLUDE     "TitleGameLoop.X68"
00001186                           470  
00001186                           471  TITLE_LOOP:
00001186                           472      ; poll for 1, 2, 3, 4 inputs
00001186  7013                     473      moveq.l #KEY_INPUT_TASK, d0
00001188  223C 31323334            474      move.l  #LEVEL_TARGET_INPUTS, d1
0000118E  4E4F                     475      trap    #15
00001190                           476      
00001190                           477      
00001190  4EB9 000011A8            478      jsr PROCESS_TITLE_INPUTS
00001196                           479      
00001196                           480      ; Input d7 - Currently selected song
00001196  2E39 00004694            481      move.l  (CurrentChoiceIndex), d7
0000119C  4EB9 000012AA            482      jsr REFRESH_TITLE_SCREEN
000011A2                           483      
000011A2                           484      ;Update Screen
000011A2  705E                     485      moveq.l #PAINT_BUFFER_SCREEN_TASK, d0
000011A4  4E4F                     486      trap    #15
000011A6                           487  
000011A6  4E75                     488      rts
000011A8                           489  
000011A8                           490  
000011A8                           491  
000011A8                           492  PROCESS_TITLE_INPUTS:
000011A8  2039 00002822            493      move.l  (HeldInputs), d0
000011AE  23C1 00002822            494      move.l  d1, (HeldInputs)                ; Add all bits currently pressed to held inputs flag
000011B4                           495      
000011B4  4680                     496      not.l   d0                              ; NOT all bits 
000011B6  C280                     497      and.l   d0, d1                          ; Remove all inputs held down creating OnPress behavior
000011B8                           498                     
000011B8                           499  
000011B8                           500      ; Check for '1' pressed
000011B8  0801 0018                501      btst.l  #ONE_PRESSED_BIT_OFFSET, d1
000011BC  6700 005E                502      beq     ONE_NOT_PRESSED_TITLE           ; Branch if '1' not pressed '1' bit == 0
000011C0                           503      
000011C0                           504      ; Check selected song index
000011C0  0CB9 00000000 00004694   505      cmp.l   #0, (CurrentChoiceIndex)
000011CA  6700 0050                506      beq     SKIP_DECREASE_CHOICE_INDEX      ; Branch and skip decrement if already at lowest index
000011CE                           507      
000011CE                           508      
000011CE                           509      ; Play button sound
000011CE  7049                     510      move.l  #PLAY_SOUND_DIRECTX_TASK, d0
000011D0  43F9 00002873            511      lea     CassetteTapeButton, a1
000011D6  4E4F                     512      trap    #15
000011D8                           513      
000011D8  2F01                     514      move.l  d1, -(sp)                           ; Save inputs
000011DA                           515      
000011DA                           516      ; Get current difficulty padding
000011DA                           517      ; -(ChoiceIndex * Difficulty skull width + ChoiceIndex * Difficulty skull padding) + position
000011DA                           518      ; Negative since the skulls grow to the left
000011DA  7000                     519      moveq.l #0, d0
000011DC  2039 00004694            520      move.l  (CurrentChoiceIndex), d0
000011E2  E488                     521      lsr.l   #2, d0     
000011E4  7202                     522      move.l  #DIFFICULTY_SKULL_PADDING, d1
000011E6  C2C0                     523      mulu    d0, d1
000011E8  C0FC 0022                524      mulu    #DIFFICULTY_SKULL_WIDTH , d0
000011EC  D081                     525      add.l   d1, d0
000011EE                           526      
000011EE  4440                     527      neg     d0  
000011F0  4840                     528      swap    d0                                  ; To get the 'x' value in upper word
000011F2  0680 01860163            529      add.l   #DIFFICUTLY_SKULL_POS, d0
000011F8                           530      
000011F8                           531      
000011F8                           532      
000011F8                           533      ; Remove a difficulty
000011F8  2F00                     534      move.l  d0, -(sp)                           ; Screen start Position
000011FA  3F3C 002C                535      move.w  #DIFFICULTY_SKULL_HEIGHT, -(sp)     ; Chunk height
000011FE  3F3C 0022                536      move.w  #DIFFICULTY_SKULL_WIDTH, -(sp)      ; Chunk width
00001202  2F00                     537      move.l  d0, -(sp)                           ; Chunk start Position
00001204  2F3C 0013A60C            538      move.l  #TitleImage, -(sp)             ; Bitmap Address 
0000120A  4EB9 0000232A            539      jsr     DRAW_BITMAP_CHUNK
00001210  4FEF 0010                540      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp     ; Fix stack
00001214                           541      
00001214  221F                     542      move.l  (sp)+, d1                           ; Pop back inputs
00001216                           543      
00001216  59B9 00004694            544      sub.l   #4, (CurrentChoiceIndex)            ; Post decrement to erase previous skull
0000121C                           545  SKIP_DECREASE_CHOICE_INDEX:
0000121C                           546      
0000121C                           547  ONE_NOT_PRESSED_TITLE:
0000121C                           548      ; Check for '2' pressed
0000121C  0801 0010                549      btst.l  #TWO_PRESSED_BIT_OFFSET, d1     
00001220  6700 0014                550      beq     TWO_NOT_PRESSED_TITLE           ; Branch and skip if '2' not pressed '2' bit == 0
00001224                           551  
00001224  13FC 0001 00002806       552      move.b  #1, (ReadyForGame)              ; Set the ready flag
0000122C                           553      
0000122C                           554      ; Play start sound
0000122C  7049                     555      move.l  #PLAY_SOUND_DIRECTX_TASK, d0
0000122E  43F9 00002855            556      lea     CassetteTapeStart, a1
00001234  4E4F                     557      trap    #15
00001236                           558      
00001236                           559  TWO_NOT_PRESSED_TITLE:
00001236                           560      ; Check for '3' pressed
00001236  0801 0008                561      btst.l  #THREE_PRESSED_BIT_OFFSET, d1
0000123A  6700 005E                562      beq     THREE_NOT_PRESSED_TITLE         ; Branch if '3' not pressed '3' bit == 0
0000123E                           563  
0000123E                           564      ; Check selected song index
0000123E  0CB9 0000000C 00004694   565      cmp.l   #MAX_SONGS_INDEX, (CurrentChoiceIndex)
00001248  6700 0050                566      beq     SKIP_INCREASE_CHOICE_INDEX      ; Branch and skip increment if already at highest index
0000124C                           567      
0000124C                           568      
0000124C                           569      ; Play button sound
0000124C  7049                     570      move.l  #PLAY_SOUND_DIRECTX_TASK, d0
0000124E  43F9 00002873            571      lea     CassetteTapeButton, a1
00001254  4E4F                     572      trap    #15
00001256                           573      
00001256                           574      
00001256  58B9 00004694            575      add.l   #4, (CurrentChoiceIndex)        ; Pre increment to draw new skull
0000125C                           576      
0000125C                           577      ; Get current difficulty padding
0000125C                           578      ; -(ChoiceIndex * Difficulty skull width) + position
0000125C                           579      ; Negative since the skulls grow to the left
0000125C  7000                     580      moveq.l #0, d0
0000125E  2039 00004694            581      move.l  (CurrentChoiceIndex), d0
00001264  E488                     582      lsr.l   #2, d0     
00001266  7202                     583      move.l  #DIFFICULTY_SKULL_PADDING, d1
00001268  C2C0                     584      mulu    d0, d1
0000126A  C0FC 0022                585      mulu    #DIFFICULTY_SKULL_WIDTH , d0
0000126E  D081                     586      add.l   d1, d0
00001270                           587      
00001270  4440                     588      neg     d0  
00001272  4840                     589      swap    d0                                  ; To get the 'x' value in upper word
00001274  0680 01860163            590      add.l   #DIFFICUTLY_SKULL_POS, d0
0000127A                           591      
0000127A                           592      ; Add a difficulty
0000127A  2F00                     593      move.l  d0, -(sp)                           ; Screen start Position
0000127C  3F3C 002C                594      move.w  #DIFFICULTY_SKULL_HEIGHT, -(sp)     ; Chunk height
00001280  3F3C 0022                595      move.w  #DIFFICULTY_SKULL_WIDTH, -(sp)      ; Chunk width
00001284  2F3C 00000000            596      move.l  #TOP_LEFT, -(sp)                    ; Chunk start Position
0000128A  2F3C 00296C3A            597      move.l  #DifficultySkull, -(sp)             ; Bitmap Address 
00001290  4EB9 0000232A            598      jsr     DRAW_BITMAP_CHUNK
00001296  4FEF 0010                599      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp     ; Fix stack
0000129A                           600      
0000129A                           601      
0000129A                           602  SKIP_INCREASE_CHOICE_INDEX:    
0000129A                           603      
0000129A                           604  THREE_NOT_PRESSED_TITLE:
0000129A                           605      ; Check for '4' pressed
0000129A  0801 0000                606      btst.l  #FOUR_PRESSED_BIT_OFFSET, d1       
0000129E  6700 0008                607      beq     FOUR_NOT_PRESSED_TITLE          ; Branch and skip if '2' not pressed '2' bit == 0
000012A2                           608      
000012A2  4EB9 00002116            609      jsr     DELETE_SONG_INFORMATION
000012A8                           610      
000012A8                           611  FOUR_NOT_PRESSED_TITLE:    
000012A8                           612      
000012A8  4E75                     613      rts
000012AA                           614      
000012AA                           615      
000012AA                           616      ; Input d7 - Current song index in bytes
000012AA                           617  REFRESH_TITLE_SCREEN:
000012AA                           618      
000012AA                           619      ; Get current song name
000012AA  41F9 00002A0E            620      lea     SongNames, a0
000012B0  41F0 7000                621      lea     (a0, d7), a0
000012B4  2050                     622      move.l  (a0), a0                       
000012B6                           623      
000012B6                           624      ; Get current song file path
000012B6  43F9 00002A70            625      lea     SongStrings, a1
000012BC  43F1 7000                626      lea     (a1, d7), a1
000012C0  2251                     627      move.l  (a1), a1                       
000012C2                           628      
000012C2                           629      ; Get current song sound file reference
000012C2  45F9 00004684            630      lea     SongSounds, a2
000012C8  45F2 7000                631      lea     (a2, d7), a2
000012CC  2452                     632      move.l  (a2), a2
000012CE                           633      
000012CE                           634      
000012CE  23C9 00004698            635      move.l  a1, (ChosenSong)
000012D4  23CA 0000469C            636      move.l  a2, (ChosenSound)
000012DA                           637      
000012DA                           638      ; Update Screen based on current choice
000012DA  7051                     639      move.l  #SET_PEN_FILL_COLOR_TASK, d0
000012DC  223C 00FFFFFF            640      move.l  #WHITE, d1
000012E2  4E4F                     641      trap    #15
000012E4                           642      
000012E4  7050                     643      move.l  #SET_PEN_COLOR_TASK, d0
000012E6  223C 00FFFFFF            644      move.l  #WHITE, d1
000012EC  4E4F                     645      trap    #15
000012EE                           646      
000012EE  7057                     647      move.l  #DRAW_RECT_TASK, d0
000012F0  223C 000000CD            648      move.l  #SONG_NAME_POS_X, d1
000012F6  243C 00000131            649      move.l  #SONG_NAME_POS_Y, d2
000012FC  263C 000001AC            650      move.l  #(SONG_NAME_POS_X+223), d3
00001302  283C 0000013B            651      move.l  #(SONG_NAME_POS_Y+10), d4
00001308  4E4F                     652      trap    #15                             ; Draw background
0000130A                           653      
0000130A  705F                     654      move.l  #PRINT_STRING_PIXEL_POS_TASK, d0
0000130C  2248                     655      move.l  a0, a1
0000130E  223C 000000CD            656      move.l  #SONG_NAME_POS_X, d1
00001314  243C 00000131            657      move.l  #SONG_NAME_POS_Y, d2
0000131A  4E4F                     658      trap    #15                             ; Draw song name
0000131C                           659      
0000131C                           660      ; Get selected song index
0000131C  2C07                     661      move.l  d7, d6
0000131E  E48E                     662      lsr.l   #2, d6                          ; Byte based indexing
00001320                           663      
00001320                           664      ; Output (CompletionData) - Current data in the file
00001320  4EB9 0000212C            665      jsr     READ_SONG_INFORMATION
00001326  1039 000021C2            666      move.b  (CompletionData), d0
0000132C                           667      
0000132C                           668      ; Get the ones place
0000132C  80FC 000A                669      divu    #10, d0
00001330  4840                     670      swap    d0
00001332  3200                     671      move.w  d0, d1                          ; Ones place -> d1
00001334  303C 0000                672      move.w  #0, d0
00001338  4840                     673      swap    d0
0000133A                           674  
0000133A                           675      ; Get the Hundreds and tens place
0000133A  80FC 000A                676      divu    #10, d0
0000133E  3600                     677      move.w  d0, d3                          ; Hundreds place -> d3
00001340  4840                     678      swap    d0
00001342  3400                     679      move.w  d0, d2                          ; Tens place -> d2
00001344                           680      
00001344                           681      
00001344                           682      ; Create percentage value string
00001344  41F9 0000137A            683      lea     SongCompletionString, a0
0000134A  0683 00000030            684      add.l   #START_OF_ASCII_NUMBERS, d3
00001350  10C3                     685      move.b  d3, (a0)+                       ; Push hundreds place to string
00001352  0682 00000030            686      add.l   #START_OF_ASCII_NUMBERS, d2
00001358  10C2                     687      move.b  d2, (a0)+                       ; Push tens place to string
0000135A  0681 00000030            688      add.l   #START_OF_ASCII_NUMBERS, d1
00001360  10C1                     689      move.b  d1, (a0)+                       ; Push ones place to string
00001362                           690      
00001362                           691      ; Update completion percent on screen based on current choice
00001362                           692      
00001362  705F                     693      move.l  #PRINT_STRING_PIXEL_POS_TASK, d0
00001364  43F9 0000137A            694      lea     SongCompletionString, a1
0000136A  223C 000000E6            695      move.l  #PERCENT_POS_X, d1
00001370  243C 00000181            696      move.l  #PERCENT_POS_Y, d2
00001376  4E4F                     697      trap    #15                             ; Draw String
00001378                           698      
00001378                           699  
00001378  4E75                     700      rts
0000137A                           701  
0000137A= 20 20 20 25 00           702  SongCompletionString        dc.b    '   %',0
00001380= 0000                     703                              dc.w    0       ; Padding
00001382                           704  
00001382                           705  
00001382                           706  
00001382                           707  
00001382                           708  
00001382                           709  
00001382                           710  
00001382                           711  
00001382                           712  
00001382                           713  
00001382                           714  
00001382                           715  
00001382                           716  
00001382                           717  
00001382                           718  
00001382                           719  
00001382                           720  
00001382                           721  
00001382                           722  
00001382                           723  -------------------- end include --------------------
00001382                           724      INCLUDE     "SoundFileInit.X68"
00001382                           725  
00001382                           726  INITIALIZE_SOUNDS:
00001382                           727      ; Halt on load - Prevent running if wrong file type
00001382  2079 0000469C            728      move.l  (ChosenSound), a0
00001388  0C90 534F4E44            729      cmp.l   #SOUND_FILE_SIGNATURE, (a0)    
0000138E  6700 0010                730      beq     CORRECT_SOUND_SIGNATURE
00001392                           731      
00001392  700D                     732      move.l  #PRINT_CR_LF_TASK, d0
00001394  43F9 00002827            733      lea     Error_WrongSOUNDSignature, a1
0000139A  4E4F                     734      trap    #15                                     ; Print out error message
0000139C                           735      
0000139C  FFFF FFFF                736      SIMHALT
000013A0                           737  CORRECT_SOUND_SIGNATURE:
000013A0  2E28 0006                738      move.l  OFFSET_SOUND_TEMPO(a0), d7              ; Tempo
000013A4  2607                     739      move.l  d7, d3                                  ; Save tempo for note offset and speed
000013A6                           740      
000013A6  8EE8 0004                741      divu    OFFSET_SOUND_QUARTER_NOTE_TICKS(a0), d7 ; Tempo / Tick per quarter note -> d7
000013AA  4847                     742      swap    d7
000013AC  3E3C 0000                743      move.w  #0, d7
000013B0  4847                     744      swap    d7                                      ; Clear upper word
000013B2                           745      
000013B2  3C28 000C                746      move.w  OFFSET_KEYPRESS_AMOUNT(a0), d6
000013B6  23C6 000095D2            747      move.l  d6, (TotalNotes)                        ; Number of notes
000013BC  23C6 00001FCA            748      move.l  d6, (EndTotalNotes)                     ; Save for end screen
000013C2  3C28 000A                749      move.w  OFFSET_EVENTS_AMOUNT(a0), d6            ; Number of events
000013C6  5346                     750      subi.w  #DBRA_ADJUSTMENT, d6                    ; Number of events counter -> d6
000013C8                           751      
000013C8                           752      
000013C8                           753      ; Getting note timing spawn offset and Note speed -------------------------
000013C8                           754      
000013C8                           755      ; Tempo / 1000
000013C8  2F3C 000003E8            756      move.l  #1000, -(sp)
000013CE  2F03                     757      move.l  d3, -(sp)
000013D0  4EB9 000023E2            758      jsr     DIVIDE_WITH_ROUNDING
000013D6  4FEF 0008                759      lea     (ROUNDING_DIVIDE_PARAM_SIZE)(sp), sp
000013DA  262F FFFC                760      move.l  (RETURN)(sp), d3                                ; Time in a beat
000013DE                           761      
000013DE                           762      ; (Time per beat) * 4 = Full measure
000013DE  E58B                     763      lsl.l   #2, d3
000013E0  23C3 000095D6            764      move.l  d3, (NoteSpawnOffsetTime)                       ; Save note spawn time offset
000013E6                           765      
000013E6                           766      
000013E6                           767      ; (Time per measure) / 10 = Time per measure in Centiseconds
000013E6  2F3C 0000000A            768      move.l  #10, -(sp)
000013EC  2F03                     769      move.l  d3, -(sp)
000013EE  4EB9 000023E2            770      jsr     DIVIDE_WITH_ROUNDING
000013F4  4FEF 0008                771      lea     (ROUNDING_DIVIDE_PARAM_SIZE)(sp), sp
000013F8  262F FFFC                772      move.l  (RETURN)(sp), d3
000013FC                           773      
000013FC                           774      ; (Play Area Height) / (Time per measure in Ccentiseconds) = Note speed in centiseconds
000013FC                           775      
000013FC  203C 00017C00            776      move.l  #((PLAY_AREA_BOTTOM_Y+1)<<FIXED_POINT_BITS), d0 ; PlayArea Height in fixed point
00001402  2F03                     777      move.l  d3, -(sp)
00001404  2F00                     778      move.l  d0, -(sp)
00001406  4EB9 000023E2            779      jsr     DIVIDE_WITH_ROUNDING
0000140C  4FEF 0008                780      lea     (ROUNDING_DIVIDE_PARAM_SIZE)(sp), sp
00001410  262F FFFC                781      move.l  (RETURN)(sp), d3
00001414                           782      
00001414  23C3 000095DA            783      move.l  d3, (NoteSpeedPixelCentiSecond)                 ; Final speed calculation for notes
0000141A                           784      ; -------------------------------------------------------------------------
0000141A                           785      
0000141A                           786      
0000141A                           787      
0000141A  43E8 000E                788      lea     OFFSET_START_NOTE_EVENTS(a0), a1
0000141E  7600                     789      moveq.l #0, d3                                          ; d3 Total Time passed
00001420                           790      
00001420                           791      ; Get all note spawn times reduced by the offset time to account for travel time
00001420                           792  PROCESS_EVENTS:
00001420  4DF9 000095A6            793      lea     SongLaneTimingTable, a6
00001426                           794      
00001426  7000                     795      moveq.l #0, d0
00001428  7200                     796      moveq.l #0, d1
0000142A  7400                     797      moveq.l #0, d2
0000142C                           798      
0000142C  1019                     799      move.b  (a1)+, d0                           ; First ticks byte
0000142E                           800      
0000142E                           801      ; Check if first bit is set indicating multibyte length delta ticks
0000142E  0800 0007                802      btst    #7, d0
00001432  6700 000A                803      beq     SKIP_VARIABLE_LENGTH_CONVERSION     ; Branch if msb is NOT set ~ 1 byte delta ticks
00001436                           804     
00001436  C03C 007F                805      and.b   #%01111111, d0                      ; Set first bit to 0
0000143A  EF88                     806      lsl.l   #7, d0                                          
0000143C  1419                     807      move.b  (a1)+, d2                           ; Get second ticks byte
0000143E                           808      
0000143E                           809  SKIP_VARIABLE_LENGTH_CONVERSION:
0000143E  D480                     810      add.l   d0, d2                              ; Total delta ticks -> d2
00001440  1219                     811      move.b  (a1)+, d1                           ; Event -> d1
00001442                           812      
00001442                           813      
00001442  C4C7                     814      mulu    d7, d2                              ; Ticks per quarter note * Delta Ticks
00001444                           815      
00001444                           816      
00001444  2F3C 000003E8            817      move.l  #1000, -(sp)
0000144A  2F02                     818      move.l  d2, -(sp)                           ; / 1000 to get miliseconds
0000144C  4EB9 000023E2            819      jsr     DIVIDE_WITH_ROUNDING
00001452  4FEF 0008                820      lea     (ROUNDING_DIVIDE_PARAM_SIZE)(sp), sp
00001456  242F FFFC                821      move.l  (RETURN)(sp), d2
0000145A                           822  
0000145A  D682                     823      add.l   d2, d3                              ; Add to total Time in miliseconds
0000145C                           824      
0000145C                           825      ; Check for note pressed event
0000145C  B23C 0090                826      cmp.b   #NOTE_PRESSED_EVENT, d1     
00001460  6600 001C                827      bne     NO_NOTE_PRESSED                     ; Branch and skip if NOT note pressed event
00001464                           828      
00001464  7000                     829      moveq.l #0, d0
00001466  1011                     830      move.b  (a1), d0                            ; Get Note lane
00001468  E588                     831      lsl.l   #2, d0                              ; Multiply by 4 for indexing
0000146A                           832      
0000146A  4DF6 0000                833      lea     (a6, d0), a6                        ; Index to correct lanes timing table
0000146E  2056                     834      move.l  (a6), a0                            ; Access the timing table
00001470  5496                     835      add.l   #2, (a6)                            ; Increment that tables index
00001472                           836       
00001472  2203                     837      move.l  d3, d1
00001474  92B9 000095D6            838      sub.l  (NoteSpawnOffsetTime), d1            ; Reduce time to account for spawning offscreen
0000147A  5281                     839      add.l   #1, d1
0000147C  3081                     840      move.w  d1, (a0)                            ; Push time to list of spawn times
0000147E                           841  
0000147E                           842  NO_NOTE_PRESSED:
0000147E  5489                     843      add.l   #2, a1                              ; skip to next delta time
00001480  51CE FF9E                844      dbra    d6, PROCESS_EVENTS                  ; Continue processing events
00001484                           845      
00001484                           846      ; Get the speed for the progress bar fill
00001484                           847      
00001484                           848      ; (Total time passed) / 10 = total time passed in centiseconds
00001484  2F3C 0000000A            849      move.l  #10, -(sp)
0000148A  2F03                     850      move.l  d3, -(sp)                           
0000148C  4EB9 000023E2            851      jsr     DIVIDE_WITH_ROUNDING
00001492  4FEF 0008                852      lea     (ROUNDING_DIVIDE_PARAM_SIZE)(sp), sp
00001496  262F FFFC                853      move.l  (RETURN)(sp), d3    
0000149A                           854             
0000149A  203C 00016D00            855      move.l  #((PROGRESS_BAR_BOTTOM_Y-PROGRESS_BAR_TOP_Y)<<FIXED_POINT_BITS), d0 
000014A0                           856      
000014A0                           857      ; ProgressBar Height / Total time centiseconds = Speed in fill rate in pixels per centi seconds
000014A0  2F03                     858      move.l  d3, -(sp)                   
000014A2  2F00                     859      move.l  d0, -(sp)
000014A4  4EB9 000023E2            860      jsr     DIVIDE_WITH_ROUNDING
000014AA  4FEF 0008                861      lea     (ROUNDING_DIVIDE_PARAM_SIZE)(sp), sp
000014AE  202F FFFC                862      move.l  (RETURN)(sp), d0
000014B2                           863      
000014B2  23C0 000095E2            864      move.l  d0, (ProgressSpeedPixelCentiSecond) ; Final speed for progressbar progression
000014B8                           865      
000014B8  4E75                     866      rts
000014BA                           867      
000014BA                           868      
000014BA                           869      
000014BA                           870      
000014BA                           871  
000014BA                           872  
000014BA                           873  
000014BA                           874  
000014BA                           875  
000014BA                           876  
000014BA                           877  
000014BA                           878  
000014BA                           879  
000014BA                           880  
000014BA                           881  
000014BA                           882  
000014BA                           883  
000014BA                           884  
000014BA                           885  -------------------- end include --------------------
000014BA                           886      INCLUDE     "InitLevel.X68"
000014BA                           887  
000014BA                           888  LOAD_LEVEL:
000014BA                           889      ; Print "Loading" to screen
000014BA  700D                     890      moveq.l #PRINT_CR_LF_TASK, d0
000014BC  43F9 0000157A            891      lea     LoadingString, a1
000014C2  4E4F                     892      trap    #15
000014C4                           893      
000014C4                           894      ; Set up flags
000014C4  13FC 0000 00002807       895      move.b  #0, (SongFinished)
000014CC  23FC 00000000 0000280C   896      move.l  #0, (SongFailed)
000014D6                           897  
000014D6                           898      ;Update Screen
000014D6  705E                     899      moveq.l #PAINT_BUFFER_SCREEN_TASK, d0
000014D8  4E4F                     900      trap    #15
000014DA                           901      
000014DA                           902      ; Draw background
000014DA  2F3C 00000000            903      move.l  #TOP_LEFT, -(sp) ; Screen start Position
000014E0  3F3C 01E0                904      move.w  #SCREEN_HEIGHT, -(sp)   ; Chunk height
000014E4  3F3C 0280                905      move.w  #SCREEN_WIDTH, -(sp)    ; Chunk width
000014E8  2F3C 00000000            906      move.l  #TOP_LEFT, -(sp) ; Chunk start Position
000014EE  2F3C 0000E582            907      move.l  #LevelBackground, -(sp) ; Bitmap Address 
000014F4  4EB9 0000232A            908      jsr     DRAW_BITMAP_CHUNK
000014FA  4FEF 0010                909      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp ; Fix stack
000014FE                           910      
000014FE                           911      ; Draw cat
000014FE  2F3C 015E0177            912      move.l  #GATO_SCREEN_START_POS, -(sp) ; Screen start Position
00001504  3F3C 003A                913      move.w  #GATO_FULL_HEIGHT, -(sp)   ; Chunk height
00001508  3F3C 003C                914      move.w  #GATO_FULL_WIDTH, -(sp)    ; Chunk width
0000150C  2F3C 00000000            915      move.l  #0, -(sp) ; Chunk start Position
00001512  2F3C 002698E2            916      move.l  #GatoAsleep, -(sp) ; Bitmap Address 
00001518  4EB9 0000232A            917      jsr     DRAW_BITMAP_CHUNK
0000151E  4FEF 0010                918      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp ; Fix stack
00001522                           919  
00001522  7051                     920      move.l  #SET_PEN_FILL_COLOR_TASK, d0
00001524  7200                     921      move.l  #0, d1
00001526  4E4F                     922      trap    #15
00001528                           923  
00001528                           924      ; Draw progress bar
00001528  7057                     925      moveq.l #DRAW_RECT_TASK, d0
0000152A  223C 00000244            926      move.l  #PROGRESS_BAR_LEFT_X, d1
00001530  740A                     927      move.l  #PROGRESS_BAR_TOP_Y, d2
00001532  263C 00000276            928      move.l  #PROGRESS_BAR_RIGHT_X, d3
00001538  283C 00000177            929      move.l  #PROGRESS_BAR_BOTTOM_Y, d4
0000153E  4E4F                     930      trap    #15
00001540                           931  
00001540  2F39 000095DE            932      move.l  (CurrentCombo), -(sp)
00001546  4EB9 0000240E            933      jsr     DRAW_TWO_DIGIT_NUMBER
0000154C  4FEF 0004                934      lea     (BYTES_IN_SEGMENT_PARAMS)(sp), sp
00001550                           935      
00001550                           936      ;Update Screen
00001550  705E                     937      moveq.l #PAINT_BUFFER_SCREEN_TASK, d0
00001552  4E4F                     938      trap    #15
00001554                           939      
00001554                           940      ; Stop all previous sounds
00001554  704D                     941      moveq.l #CONTROL_DIRECTX_PLAYER_TASK, d0
00001556  7403                     942      move.l  #STOP_ALL_SOUNDS, d2
00001558  4E4F                     943      trap    #15
0000155A                           944      
0000155A                           945      ; Set init start time
0000155A  7008                     946      moveq.l #GET_TIME_TASK, d0
0000155C  4E4F                     947      trap    #15
0000155E  23C1 000027FE            948      move.l  d1, (PreviousTime)
00001564                           949         
00001564                           950      ; Start song
00001564  704A                     951      move.l  #LOAD_DIRECTX_SOUND_TASK, d0
00001566  2279 00004698            952      move.l  (ChosenSong), a1
0000156C  7200                     953      move.l  #CHOSEN_SONG_LOAD_NUMBER, d1
0000156E  4E4F                     954      trap    #15
00001570                           955  
00001570  704D                     956      moveq.l #CONTROL_DIRECTX_PLAYER_TASK, d0
00001572  7200                     957      move.l  #CHOSEN_SONG_LOAD_NUMBER, d1
00001574  7400                     958      move.l  #PLAY_SOUND_ONCE, d2
00001576  4E4F                     959      trap    #15
00001578                           960      
00001578  4E75                     961      rts
0000157A                           962      
0000157A                           963      
0000157A= 4C 6F 61 64 69 6E ...    964  LoadingString   dc.b    'Loading',0
00001582                           965  
00001582                           966  
00001582                           967  
00001582                           968  
00001582                           969  
00001582                           970  
00001582                           971  
00001582                           972  
00001582                           973  
00001582                           974  
00001582                           975  
00001582                           976  
00001582                           977  
00001582                           978  
00001582                           979  
00001582                           980  
00001582                           981  
00001582                           982  
00001582                           983  
00001582                           984  
00001582                           985  
00001582                           986  
00001582                           987  
00001582                           988  
00001582                           989  
00001582                           990  -------------------- end include --------------------
00001582                           991      INCLUDE     "LevelGameLoop.X68"
00001582                           992  
00001582                           993  
00001582                           994  LEVEL_LOOP:
00001582                           995  
00001582                           996      ;Update Time Elapsed
00001582  2039 000027FA            997      move.l  (DeltaTime), d0
00001588  D1B9 00002802            998      add.l   d0, (TimeElapsed)
0000158E                           999  
0000158E                          1000      ; Poll for 1, 2, 3, 4 inputs
0000158E  7013                    1001      moveq.l #KEY_INPUT_TASK, d0
00001590  223C 31323334           1002      move.l  #LEVEL_TARGET_INPUTS, d1
00001596  4E4F                    1003      trap    #15
00001598                          1004      
00001598  2039 00002822           1005      move.l  (HeldInputs), d0
0000159E  23C1 00002822           1006      move.l  d1, (HeldInputs)                ; Add all bits currently pressed to held inputs flag
000015A4  4680                    1007      not.l   d0                              ; NOT all bits 
000015A6  C280                    1008      and.l   d0, d1                          ; Remove all inputs held down creating OnPress behavior
000015A8  23C1 0000281C           1009      move.l  d1, (InputFlags)                ; Add inputs to input flags
000015AE                          1010      
000015AE                          1011      ; Poll for 5 input
000015AE  7013                    1012      moveq.l #KEY_INPUT_TASK, d0
000015B0  7235                    1013      move.l  #FIVE_PRESSED_INPUT, d1
000015B2  4E4F                    1014      trap    #15
000015B4                          1015      
000015B4  41F9 00002822           1016      lea     HeldInputs, a0
000015BA  5888                    1017      add.l   #4, a0
000015BC  1010                    1018      move.b  (a0), d0
000015BE  1081                    1019      move.b  d1, (a0)                        ; Add all bits currently pressed to held inputs flag
000015C0  4600                    1020      not.b   d0                              ; NOT all bits
000015C2  C200                    1021      and.b   d0, d1                          ; Remove all inputs held down creating OnPress behavior
000015C4                          1022      
000015C4  41F9 0000281C           1023      lea     InputFlags, a0
000015CA  5888                    1024      add.l   #4, a0
000015CC  1081                    1025      move.b  d1, (a0)                        ; Add inputs to input flag in 5th position
000015CE                          1026      
000015CE                          1027      ; Input d6: lane to check collision
000015CE  7C01                    1028      moveq.l #1, d6
000015D0  4EB9 00001660           1029      jsr     PROCESS_INPUTS
000015D6  7C02                    1030      moveq.l #2, d6
000015D8  4EB9 00001660           1031      jsr     PROCESS_INPUTS
000015DE  7C03                    1032      moveq.l #3, d6
000015E0  4EB9 00001660           1033      jsr     PROCESS_INPUTS
000015E6  7C04                    1034      moveq.l #4, d6
000015E8  4EB9 00001660           1035      jsr     PROCESS_INPUTS
000015EE  7C05                    1036      moveq.l #5, d6
000015F0  4EB9 00001660           1037      jsr     PROCESS_INPUTS
000015F6                          1038      
000015F6                          1039      ; Check song finished flag
000015F6  0C39 0001 00002807      1040      cmp.b   #1, (SongFinished)
000015FE  6700 005E               1041      beq     FINISH_LEVEL_LOOP               ; Branch and skip if song is finished ~ No more notes
00001602                          1042      
00001602  4EB9 00001A7C           1043      jsr     DRAW_PLAY_AREA_STATIC_ELEMENTS
00001608                          1044      
00001608                          1045      ; Check total notes remaining
00001608  0CB9 00000000 000095D2  1046      cmp.l   #0, (TotalNotes)
00001612  6600 000A               1047      bne     SKIP_SET_FINISH_FLAG            ; Branch and skip if notes still remaining
00001616  13FC 0001 00002807      1048      move.b  #1, (SongFinished)
0000161E                          1049      
0000161E                          1050  SKIP_SET_FINISH_FLAG:
0000161E                          1051      
0000161E                          1052      ; Get note speed * delta time -> d7
0000161E  2E39 000095DA           1053      move.l  (NoteSpeedPixelCentiSecond), d7
00001624  2239 000027FA           1054      move.l  (DeltaTime), d1
0000162A  CEC1                    1055      mulu    d1, d7
0000162C                          1056      
0000162C                          1057      ; Draw notes for all lanes
0000162C  7C01                    1058      moveq.l #1, d6
0000162E  4EB9 00001740           1059      jsr     DRAW_NOTES
00001634  7C02                    1060      moveq.l #2, d6
00001636  4EB9 00001740           1061      jsr     DRAW_NOTES
0000163C  7C03                    1062      moveq.l #3, d6
0000163E  4EB9 00001740           1063      jsr     DRAW_NOTES
00001644  7C04                    1064      moveq.l #4, d6
00001646  4EB9 00001740           1065      jsr     DRAW_NOTES
0000164C  7C05                    1066      moveq.l #5, d6
0000164E  4EB9 00001740           1067      jsr     DRAW_NOTES
00001654                          1068      
00001654  4EB9 00001816           1069      jsr     UPDATE_PROGRESS_BAR
0000165A                          1070      
0000165A                          1071      ;Update Screen
0000165A  705E                    1072      moveq.l #PAINT_BUFFER_SCREEN_TASK, d0
0000165C  4E4F                    1073      trap    #15
0000165E                          1074      
0000165E                          1075      
0000165E                          1076      
0000165E                          1077  FINISH_LEVEL_LOOP:
0000165E  4E75                    1078      rts
00001660                          1079  
00001660                          1080   
00001660                          1081      ; Input d6 - Target lane to check collisions for
00001660                          1082  PROCESS_INPUTS:
00001660  0C39 0001 00002807      1083      cmp.b   #1, (SongFinished)
00001668  6700 00D4               1084      beq     FINISH_COLLISION_CHECK          ; Skip if song finished
0000166C  5386                    1085      sub.l   #1, d6
0000166E  2A06                    1086      move.l  d6, d5                          ; Input flag index with bytes -> d5
00001670                          1087      
00001670  E58E                    1088      lsl.l   #2, d6                          ; For indexing with longs -> d6
00001672                          1089      
00001672                          1090      
00001672                          1091      
00001672  43F9 0000E526           1092      lea     OldestLaneNotes, a1
00001678  43F1 6000               1093      lea     (a1, d6), a1
0000167C  2251                    1094      move.l  (a1), a1                        ; Oldest, (Farthest down on screen), index offset
0000167E                          1095      
0000167E  41F9 0000E512           1096      lea     LanePosTables, a0
00001684  41F0 6000               1097      lea     (a0, d6), a0
00001688  2050                    1098      move.l  (a0), a0                        ; Table of note positions
0000168A                          1099      
0000168A  D1D1                    1100      adda.l  (a1), a0                        ; + Oldest index offset = Index to start drawing/checking
0000168C                          1101  
0000168C                          1102      
0000168C  2410                    1103      move.l  (a0), d2                        ; Farthest down note pos -> d2
0000168E  E08A                    1104      lsr.l   #FIXED_POINT_BITS, d2           ; Convert to whole pixel
00001690                          1105      
00001690  4BF9 0000281C           1106      lea     InputFlags, a5
00001696  DBC5                    1107      add.l   d5, a5                          ; Check desired lane input flag
00001698                          1108  
00001698  0C15 0000               1109      cmp.b   #0, (a5)                        ; Compares input bit with 0
0000169C  6700 00A0               1110      beq     FINISH_COLLISION_CHECK          ; Branch if input not pressed ~Input bit == 0
000016A0                          1111     
000016A0  263C 00000156           1112      move.l  #TARGET_LINE_Y, d3
000016A6  9682                    1113      sub.l   d2, d3                          ; Target line - farthest down note pos
000016A8                          1114      
000016A8  6A00 0004               1115      bpl     SKIP_NEGATION                   ; Branches if number is already positive
000016AC  4483                    1116      neg.l   d3                              ; Negates the difference for the absolute value
000016AE                          1117      
000016AE                          1118  SKIP_NEGATION:
000016AE                          1119      ; Checks the difference between position and the size of the note
000016AE  B6BC 00000019           1120      cmp.l   #(NOTE_SIZE), d3
000016B4  6E00 0044               1121      bgt     NOTE_MISSED                     ; Branch if the difference is greater ~Not colliding 
000016B8                          1122      
000016B8                          1123      ; Increment Combo and update max combo if needed
000016B8  52B9 000095DE           1124      add.l   #1, (CurrentCombo)
000016BE  2039 000095DE           1125      move.l  (CurrentCombo), d0
000016C4  B0B9 00001FD6           1126      cmp.l   (EndBestCombo), d0
000016CA  6D00 0008               1127      blt     SKIP_SET_MAX_COMBO
000016CE  23C0 00001FD6           1128      move.l  d0, (EndBestCombo)
000016D4                          1129  SKIP_SET_MAX_COMBO:
000016D4                          1130      ; Draw combo in seven segment
000016D4  2F39 000095DE           1131      move.l  (CurrentCombo), -(sp)
000016DA  4EB9 0000240E           1132      jsr     DRAW_TWO_DIGIT_NUMBER
000016E0  4FEF 0004               1133      lea     (BYTES_IN_SEGMENT_PARAMS)(sp), sp
000016E4                          1134      
000016E4                          1135      ; Decrement total notes remaining
000016E4  53B9 000095D2           1136      subi.l  #1, (TotalNotes)
000016EA  5891                    1137      add.l   #BYTES_IN_LONG, (a1)            ; Remove from considerations for future draws/logic
000016EC                          1138      
000016EC                          1139      ; Add score and increase notes hit
000016EC  52B9 00001FCE           1140      add.l   #1, (EndNotesHit)
000016F2  4EB9 0000267E           1141      jsr     INCREASE_PERFORMANCE
000016F8                          1142      
000016F8  6044                    1143      bra.s   FINISH_COLLISION_CHECK
000016FA                          1144  NOTE_MISSED:
000016FA                          1145      ; Reset current combo and draw in seven segment
000016FA  23FC 00000000 000095DE  1146      move.l  #0, (CurrentCombo)
00001704  2F39 000095DE           1147      move.l  (CurrentCombo), -(sp)
0000170A  4EB9 0000240E           1148      jsr     DRAW_TWO_DIGIT_NUMBER
00001710  4FEF 0004               1149      lea     (BYTES_IN_SEGMENT_PARAMS)(sp), sp
00001714                          1150      
00001714                          1151      ; Play Overstrum sound
00001714  4EB9 000022FC           1152      jsr     GET_RANDOM_0_5_D7               ; Random from 0-5
0000171A  E58F                    1153      lsl.l   #2, d7                          ; Long indexing
0000171C  41F9 00002988           1154      lea     OverstrumSounds, a0
00001722  41F0 7000               1155      lea     (a0, d7), a0
00001726  2250                    1156      move.l  (a0), a1
00001728  7049                    1157      move.l  #PLAY_SOUND_DIRECTX_TASK, d0
0000172A  4E4F                    1158      trap    #15
0000172C                          1159      
0000172C                          1160      ; Subtract score and increase overstrums
0000172C  52B9 00001FDA           1161      add.l   #1, (EndOverstrums)
00001732  4EB9 00002626           1162      jsr     DECREASE_PERFORMANCE
00001738  4EB9 00002626           1163      jsr     DECREASE_PERFORMANCE            ; Double call to reduce spamming
0000173E                          1164      
0000173E                          1165      
0000173E                          1166  FINISH_COLLISION_CHECK:
0000173E  4E75                    1167      rts
00001740                          1168  
00001740                          1169      ; Draws the notes in a specific lane
00001740                          1170      ; Input d6 - Lane to draw
00001740                          1171  DRAW_NOTES:
00001740  0C39 0001 00002807      1172      cmp.b   #1, (SongFinished)
00001748  6700 00CA               1173      beq     FINISH_DRAW_NOTES               ; Skip if no notes remaining
0000174C                          1174      
0000174C  5386                    1175      sub.l   #1, d6                          ; For indexing
0000174E  E58E                    1176      lsl.l   #2, d6
00001750                          1177      
00001750  41F9 000095BE           1178      lea     CurrentLaneTimings, a0
00001756  41F0 6000               1179      lea     (a0, d6), a0                    ; Current timing index
0000175A  2050                    1180      move.l  (a0), a0                        ; Next Note timing
0000175C  2850                    1181      move.l  (a0), a4                        
0000175E                          1182      
0000175E  43F9 0000E526           1183      lea     OldestLaneNotes, a1
00001764  43F1 6000               1184      lea     (a1, d6), a1
00001768  2251                    1185      move.l  (a1), a1                        ; Farthest down note offset
0000176A                          1186      
0000176A  45F9 0000E53A           1187      lea     LaneCurrentNotes, a2
00001770  45F2 6000               1188      lea     (a2, d6), a2
00001774  2452                    1189      move.l  (a2), a2                        ; Current note index
00001776                          1190      
00001776  47F9 0000E54E           1191      lea     LaneCurrentNoteIndexs, a3
0000177C  47F3 6000               1192      lea     (a3, d6), a3
00001780  2653                    1193      move.l  (a3), a3                        ; Current index
00001782                          1194        
00001782                          1195      
00001782  2039 00002802           1196      move.l  (TimeElapsed), d0
00001788  C0FC 000A               1197      mulu    #10, d0                         ; Multiply by 10 for thousands of a second
0000178C                          1198      
0000178C                          1199      ; Check the next notes timing
0000178C  7200                    1200      moveq.l #0, d1
0000178E  3214                    1201      move.w  (a4), d1
00001790  B081                    1202      cmp.l   d1, d0
00001792  6D00 0008               1203      blt     START_DRAW_LOOP                 ; Branch if the time elapsed < Next notes spawn time
00001796                          1204      
00001796                          1205      ; Increase the index of the next note spawn time, Current/most recent note index spawned, current index
00001796  5892                    1206      add.l   #BYTES_IN_LONG, (a2)
00001798  5293                    1207      add.l   #1, (a3)
0000179A  5490                    1208      add.l   #2, (a0)
0000179C                          1209  
0000179C                          1210  START_DRAW_LOOP:
0000179C                          1211      ; Checks index
0000179C  0C93 00000000           1212      cmp.l   #0, (a3)
000017A2  6D00 0070               1213      blt     FINISH_DRAW_NOTES               ; Branch and skip if index is invald ~ -1
000017A6                          1214      
000017A6  41F9 0000E512           1215      lea     LanePosTables, a0
000017AC  41F0 6000               1216      lea     (a0, d6), a0
000017B0  2050                    1217      move.l  (a0), a0                        ; Table of note positions
000017B2                          1218      
000017B2  D1D1                    1219      adda.l  (a1), a0                        ; + Passed notes offset
000017B4                          1220      
000017B4  B1D2                    1221      cmp.l   (a2), a0                        ; Note index >= Current note
000017B6  6C00 005C               1222      bge     FINISH_DRAW_NOTES               ; Skip to the end if no notes to currently draw
000017BA                          1223  DRAW_LOOP:
000017BA                          1224      
000017BA  47F9 00001B86           1225      lea     DRAW_NOTE_ROUTINE_TABLE, a3 
000017C0  7000                    1226      moveq.l #0, d0 
000017C2  47F3 6000               1227      lea     (a3, d6), a3
000017C6  2653                    1228      move.l  (a3), a3                        ; Pick lane to draw to
000017C8  4E93                    1229      jsr     (a3)                            ; Draw note in specified lane
000017CA                          1230  
000017CA  DF90                    1231      add.l   d7, (a0)                        ; Update position for next draw
000017CC                          1232      
000017CC                          1233      ; Checks if the current note position < Bottom of the play area
000017CC  0C90 00016F00           1234      cmp.l   #((PLAY_AREA_BOTTOM_Y-NOTE_SIZE/2)<<FIXED_POINT_BITS), (a0)
000017D2  6D00 003A               1235      blt     SKIP_REMOVE_NOTE                ; Branch and skip if current note is inside play area
000017D6                          1236     
000017D6                          1237      ; When note exceeds play area, reset combo and decrease score -------------
000017D6                          1238      ; Reset combo
000017D6  23FC 00000000 000095DE  1239      move.l  #0, (CurrentCombo)
000017E0  2F39 000095DE           1240      move.l  (CurrentCombo), -(sp)
000017E6  4EB9 0000240E           1241      jsr     DRAW_TWO_DIGIT_NUMBER
000017EC  4FEF 0004               1242      lea     (BYTES_IN_SEGMENT_PARAMS)(sp), sp
000017F0  5891                    1243      add.l   #BYTES_IN_LONG, (a1) ;Remove from considerations for future draws/logic
000017F2  53B9 000095D2           1244      subi.l  #1, (TotalNotes)
000017F8                          1245      
000017F8                          1246      ; Play missed sound
000017F8  7049                    1247      move.l  #PLAY_SOUND_DIRECTX_TASK, d0
000017FA  43F9 000028E8           1248      lea     MissedNoteFXString, a1
00001800  4E4F                    1249      trap    #15
00001802                          1250      
00001802  52B9 00001FD2           1251      add.l   #1, (EndNotesMissed)
00001808  4EB9 00002626           1252      jsr     DECREASE_PERFORMANCE
0000180E                          1253      ; -------------------------------------------------------------------------
0000180E                          1254  SKIP_REMOVE_NOTE
0000180E  5888                    1255      add.l   #4, a0
00001810  B1D2                    1256      cmp.l   (a2), a0                        ; Repeat if there are still notes to draw between the current note
00001812                          1257                                              ; and farthest down note
00001812  6DA6                    1258      blt     DRAW_LOOP
00001814                          1259      
00001814                          1260  FINISH_DRAW_NOTES:
00001814  4E75                    1261      rts
00001816                          1262  
00001816                          1263  
00001816                          1264      ; Draws and updates the progress bar
00001816                          1265      
00001816                          1266  UPDATE_PROGRESS_BAR:
00001816                          1267      ; Draw fill update
00001816  7051                    1268      move.l  #SET_PEN_FILL_COLOR_TASK, d0
00001818  223C 00FFFFFF           1269      move.l  #WHITE, d1
0000181E  4E4F                    1270      trap    #15
00001820  7057                    1271      moveq.l #DRAW_RECT_TASK, d0
00001822  223C 00000244           1272      move.l  #PROGRESS_BAR_LEFT_X, d1
00001828  2439 000095E6           1273      move.l  (ProgressBarFillHeightPos), d2
0000182E  E08A                    1274      lsr.l   #FIXED_POINT_BITS, d2           ; Fix to whole number of pixels
00001830  263C 00000276           1275      move.l  #PROGRESS_BAR_RIGHT_X, d3
00001836  283C 00000177           1276      move.l  #PROGRESS_BAR_BOTTOM_Y, d4
0000183C  4E4F                    1277      trap    #15
0000183E                          1278      
0000183E                          1279      ; Reset fill color
0000183E  7051                    1280      move.l  #SET_PEN_FILL_COLOR_TASK, d0
00001840  7200                    1281      move.l  #0, d1
00001842  4E4F                    1282      trap    #15
00001844                          1283      
00001844                          1284      ; Update progross position
00001844  2C39 000095E2           1285      move.l  (ProgressSpeedPixelCentiSecond), d6
0000184A  2239 000027FA           1286      move.l  (DeltaTime), d1
00001850  CCC1                    1287      mulu    d1, d6 
00001852  9DB9 000095E6           1288      sub.l   d6, (ProgressBarFillHeightPos)  
00001858                          1289      
00001858  4E75                    1290      rts
0000185A                          1291  
0000185A                          1292  
0000185A                          1293      ; Draws a note in lane 1
0000185A                          1294  DRAW_NOTE_LANE1:
0000185A                          1295      
0000185A                          1296      ; Draws the Outer layer
0000185A  7050                    1297      moveq.l #SET_PEN_COLOR_TASK, d0
0000185C  223C 00FF3F3F           1298      move.l  #LANE1_HAMMER_COLOR, d1
00001862  4E4F                    1299      trap    #15
00001864  7057                    1300      moveq.l #DRAW_RECT_TASK, d0
00001866  724C                    1301      move.l  #(LANE1_X-(NOTE_WIDTH/2)), d1
00001868  2410                    1302      move.l  (a0), d2
0000186A  E08A                    1303      lsr.l   #FIXED_POINT_BITS, d2           ; Fix to whole number of pixels
0000186C  0482 0000000C           1304      subi.l  #(NOTE_SIZE/2), d2
00001872  7674                    1305      move.l  #(LANE1_X+(NOTE_WIDTH/2)), d3
00001874  2802                    1306      move.l  d2, d4
00001876  0684 00000019           1307      addi.l  #NOTE_SIZE, d4
0000187C  4E4F                    1308      trap    #15
0000187E                          1309      
0000187E                          1310      ; Draws the inner layer
0000187E  7051                    1311      moveq.l #SET_PEN_FILL_COLOR_TASK, d0
00001880  223C 00FF3F3F           1312      move.l  #LANE1_HAMMER_COLOR, d1
00001886  4E4F                    1313      trap    #15
00001888  7057                    1314      moveq.l #DRAW_RECT_TASK, d0
0000188A  7251                    1315      move.l  #(LANE1_X-(NOTE_WIDTH/2)+5), d1
0000188C  2410                    1316      move.l  (a0), d2
0000188E  E08A                    1317      lsr.l   #FIXED_POINT_BITS, d2           ; Fix to whole number of pixels
00001890  5A82                    1318      add.l   #5, d2
00001892  0482 0000000C           1319      subi.l  #(NOTE_SIZE/2), d2
00001898  766F                    1320      move.l  #(LANE1_X+(NOTE_WIDTH/2)-5), d3
0000189A  2802                    1321      move.l  d2, d4
0000189C  0684 00000019           1322      addi.l  #NOTE_SIZE, d4
000018A2  0484 0000000A           1323      sub.l   #10, d4
000018A8  4E4F                    1324      trap    #15
000018AA                          1325      
000018AA                          1326      ; Reset pen and fill color
000018AA  7051                    1327      moveq.l #SET_PEN_FILL_COLOR_TASK, d0
000018AC  7200                    1328      move.l  #0, d1
000018AE  4E4F                    1329      trap    #15
000018B0  7050                    1330      moveq.l #SET_PEN_COLOR_TASK, d0
000018B2  223C 00FFFFFF           1331      move.l  #WHITE, d1
000018B8  4E4F                    1332      trap    #15
000018BA                          1333      
000018BA  4E75                    1334      rts
000018BC                          1335      
000018BC                          1336      ; Draws a note in lane 1
000018BC                          1337  DRAW_NOTE_LANE2:
000018BC                          1338      ; Draws the outer layer
000018BC  7050                    1339      moveq.l #SET_PEN_COLOR_TASK, d0
000018BE  223C 003FFF43           1340      move.l  #LANE2_HAMMER_COLOR, d1
000018C4  4E4F                    1341      trap    #15
000018C6  7057                    1342      moveq.l #DRAW_RECT_TASK, d0
000018C8  727A                    1343      move.l  #(LANE2_X-(NOTE_WIDTH/2)), d1
000018CA  2410                    1344      move.l  (a0), d2
000018CC  E08A                    1345      lsr.l   #FIXED_POINT_BITS, d2           ; Fix to whole number of pixels
000018CE  0482 0000000C           1346      subi.l  #(NOTE_SIZE/2), d2
000018D4  263C 000000A2           1347      move.l  #(LANE2_X+(NOTE_WIDTH/2)), d3
000018DA  2802                    1348      move.l  d2, d4
000018DC  0684 00000019           1349      addi.l  #NOTE_SIZE, d4
000018E2  4E4F                    1350      trap    #15
000018E4                          1351      
000018E4                          1352      ; Draws the inner layer
000018E4  7051                    1353      moveq.l #SET_PEN_FILL_COLOR_TASK, d0
000018E6  223C 003FFF43           1354      move.l  #LANE2_HAMMER_COLOR, d1
000018EC  4E4F                    1355      trap    #15
000018EE  7057                    1356      moveq.l #DRAW_RECT_TASK, d0
000018F0  727F                    1357      move.l  #(LANE2_X-(NOTE_WIDTH/2)+5), d1
000018F2  2410                    1358      move.l  (a0), d2
000018F4  E08A                    1359      lsr.l   #FIXED_POINT_BITS, d2           ; Fix to whole number of pixels
000018F6  5A82                    1360      add.l   #5, d2
000018F8  0482 0000000C           1361      subi.l  #(NOTE_SIZE/2), d2
000018FE  263C 0000009D           1362      move.l  #(LANE2_X+(NOTE_WIDTH/2)-5), d3
00001904  2802                    1363      move.l  d2, d4
00001906  0684 00000019           1364      addi.l  #NOTE_SIZE, d4
0000190C  0484 0000000A           1365      sub.l   #10, d4
00001912  4E4F                    1366      trap    #15
00001914                          1367      
00001914                          1368      ; Reset pen and fill color
00001914  7051                    1369      moveq.l #SET_PEN_FILL_COLOR_TASK, d0
00001916  7200                    1370      move.l  #0, d1
00001918  4E4F                    1371      trap    #15
0000191A  7050                    1372      moveq.l #SET_PEN_COLOR_TASK, d0
0000191C  223C 00FFFFFF           1373      move.l  #WHITE, d1
00001922  4E4F                    1374      trap    #15
00001924                          1375  
00001924  4E75                    1376      rts
00001926                          1377  
00001926                          1378  DRAW_NOTE_LANE3:
00001926                          1379      ; Draws the outer layer
00001926  7050                    1380      moveq.l #SET_PEN_COLOR_TASK, d0
00001928  223C 00433FFF           1381      move.l  #LANE3_HAMMER_COLOR, d1
0000192E  4E4F                    1382      trap    #15
00001930  7057                    1383      moveq.l #DRAW_RECT_TASK, d0
00001932  223C 000000A8           1384      move.l  #(LANE3_X-(NOTE_WIDTH/2)), d1
00001938  2410                    1385      move.l  (a0), d2
0000193A  E08A                    1386      lsr.l   #FIXED_POINT_BITS, d2           ; Fix to whole number of pixels
0000193C  0482 0000000C           1387      subi.l  #(NOTE_SIZE/2), d2
00001942  263C 000000D0           1388      move.l  #(LANE3_X+(NOTE_WIDTH/2)), d3
00001948  2802                    1389      move.l  d2, d4
0000194A  0684 00000019           1390      addi.l  #NOTE_SIZE, d4
00001950  4E4F                    1391      trap    #15
00001952                          1392      
00001952                          1393      ; Draws the inner layer
00001952  7051                    1394      moveq.l #SET_PEN_FILL_COLOR_TASK, d0
00001954  223C 00433FFF           1395      move.l  #LANE3_HAMMER_COLOR, d1
0000195A  4E4F                    1396      trap    #15
0000195C  7057                    1397      moveq.l #DRAW_RECT_TASK, d0
0000195E  223C 000000AD           1398      move.l  #(LANE3_X-(NOTE_WIDTH/2)+5), d1
00001964  2410                    1399      move.l  (a0), d2
00001966  E08A                    1400      lsr.l   #FIXED_POINT_BITS, d2           ; Fix to whole number of pixels
00001968  5A82                    1401      add.l   #5, d2
0000196A  0482 0000000C           1402      subi.l  #(NOTE_SIZE/2), d2
00001970  263C 000000CB           1403      move.l  #(LANE3_X+(NOTE_WIDTH/2)-5), d3
00001976  2802                    1404      move.l  d2, d4
00001978  0684 00000019           1405      addi.l  #NOTE_SIZE, d4
0000197E  0484 0000000A           1406      sub.l   #10, d4
00001984  4E4F                    1407      trap    #15
00001986                          1408      
00001986                          1409      ; Reset pen and fill color
00001986  7051                    1410      moveq.l #SET_PEN_FILL_COLOR_TASK, d0
00001988  7200                    1411      move.l  #0, d1
0000198A  4E4F                    1412      trap    #15
0000198C  7050                    1413      moveq.l #SET_PEN_COLOR_TASK, d0
0000198E  223C 00FFFFFF           1414      move.l  #WHITE, d1
00001994  4E4F                    1415      trap    #15
00001996                          1416  
00001996                          1417      
00001996  4E75                    1418      rts
00001998                          1419      
00001998                          1420  DRAW_NOTE_LANE4:
00001998                          1421      ; Draws the outer layer
00001998  7050                    1422      moveq.l #SET_PEN_COLOR_TASK, d0
0000199A  223C 000075FF           1423      move.l  #LANE4_HAMMER_COLOR, d1
000019A0  4E4F                    1424      trap    #15
000019A2  7057                    1425      moveq.l #DRAW_RECT_TASK, d0
000019A4  223C 000000D6           1426      move.l  #(LANE4_X-(NOTE_WIDTH/2)), d1
000019AA  2410                    1427      move.l  (a0), d2
000019AC  E08A                    1428      lsr.l   #FIXED_POINT_BITS, d2           ; Fix to whole number of pixels
000019AE  0482 0000000C           1429      subi.l  #(NOTE_SIZE/2), d2
000019B4  263C 000000FE           1430      move.l  #(LANE4_X+(NOTE_WIDTH/2)), d3
000019BA  2802                    1431      move.l  d2, d4
000019BC  0684 00000019           1432      addi.l  #NOTE_SIZE, d4
000019C2  4E4F                    1433      trap    #15
000019C4                          1434      
000019C4                          1435      ; Draws the inner layer
000019C4  7051                    1436      moveq.l #SET_PEN_FILL_COLOR_TASK, d0
000019C6  223C 000075FF           1437      move.l  #LANE4_HAMMER_COLOR, d1
000019CC  4E4F                    1438      trap    #15
000019CE  7057                    1439      moveq.l #DRAW_RECT_TASK, d0
000019D0  223C 000000DB           1440      move.l  #(LANE4_X-(NOTE_WIDTH/2)+5), d1
000019D6  2410                    1441      move.l  (a0), d2
000019D8  E08A                    1442      lsr.l   #FIXED_POINT_BITS, d2           ; Fix to whole number of pixels
000019DA  5A82                    1443      add.l   #5, d2
000019DC  0482 0000000C           1444      subi.l  #(NOTE_SIZE/2), d2
000019E2  263C 000000F9           1445      move.l  #(LANE4_X+(NOTE_WIDTH/2)-5), d3
000019E8  2802                    1446      move.l  d2, d4
000019EA  0684 00000019           1447      addi.l  #NOTE_SIZE, d4
000019F0  0484 0000000A           1448      sub.l   #10, d4
000019F6  4E4F                    1449      trap    #15
000019F8                          1450      
000019F8                          1451      ; Reset pen and fill color
000019F8  7051                    1452      moveq.l #SET_PEN_FILL_COLOR_TASK, d0
000019FA  7200                    1453      move.l  #0, d1
000019FC  4E4F                    1454      trap    #15
000019FE  7050                    1455      moveq.l #SET_PEN_COLOR_TASK, d0
00001A00  223C 00FFFFFF           1456      move.l  #WHITE, d1
00001A06  4E4F                    1457      trap    #15
00001A08                          1458  
00001A08                          1459      
00001A08  4E75                    1460      rts
00001A0A                          1461      
00001A0A                          1462  DRAW_NOTE_LANE5:
00001A0A                          1463      ; Draw the outer layer
00001A0A  7050                    1464      moveq.l #SET_PEN_COLOR_TASK, d0
00001A0C  223C 0000FFFF           1465      move.l  #LANE5_HAMMER_COLOR, d1
00001A12  4E4F                    1466      trap    #15
00001A14  7057                    1467      moveq.l #DRAW_RECT_TASK, d0
00001A16  223C 00000104           1468      move.l  #(LANE5_X-(NOTE_WIDTH/2)), d1
00001A1C  2410                    1469      move.l  (a0), d2
00001A1E  E08A                    1470      lsr.l   #FIXED_POINT_BITS, d2           ; Fix to whole number of pixels
00001A20  0482 0000000C           1471      subi.l  #(NOTE_SIZE/2), d2
00001A26  263C 0000012C           1472      move.l  #(LANE5_X+(NOTE_WIDTH/2)), d3
00001A2C  2802                    1473      move.l  d2, d4
00001A2E  0684 00000019           1474      addi.l  #NOTE_SIZE, d4
00001A34  4E4F                    1475      trap    #15
00001A36                          1476      
00001A36                          1477      ; Draw the inner layer
00001A36  7051                    1478      moveq.l #SET_PEN_FILL_COLOR_TASK, d0
00001A38  223C 0000FFFF           1479      move.l  #LANE5_HAMMER_COLOR, d1
00001A3E  4E4F                    1480      trap    #15
00001A40  7057                    1481      moveq.l #DRAW_RECT_TASK, d0
00001A42  223C 00000109           1482      move.l  #(LANE5_X-(NOTE_WIDTH/2)+5), d1
00001A48  2410                    1483      move.l  (a0), d2
00001A4A  E08A                    1484      lsr.l   #FIXED_POINT_BITS, d2           ; Fix to whole number of pixels
00001A4C  5A82                    1485      add.l   #5, d2
00001A4E  0482 0000000C           1486      subi.l  #(NOTE_SIZE/2), d2
00001A54  263C 00000127           1487      move.l  #(LANE5_X+(NOTE_WIDTH/2)-5), d3
00001A5A  2802                    1488      move.l  d2, d4
00001A5C  0684 00000019           1489      addi.l  #NOTE_SIZE, d4
00001A62  0484 0000000A           1490      sub.l   #10, d4
00001A68  4E4F                    1491      trap    #15
00001A6A                          1492      
00001A6A                          1493      ; Reset pen and fill color
00001A6A  7051                    1494      moveq.l #SET_PEN_FILL_COLOR_TASK, d0
00001A6C  7200                    1495      move.l  #0, d1
00001A6E  4E4F                    1496      trap    #15
00001A70  7050                    1497      moveq.l #SET_PEN_COLOR_TASK, d0
00001A72  223C 00FFFFFF           1498      move.l  #WHITE, d1
00001A78  4E4F                    1499      trap    #15
00001A7A                          1500  
00001A7A                          1501      
00001A7A  4E75                    1502      rts
00001A7C                          1503            
00001A7C                          1504      ; Displays all of the static gameplay elements
00001A7C                          1505  DRAW_PLAY_AREA_STATIC_ELEMENTS:
00001A7C                          1506      ; Paint background of play area with black box
00001A7C  705D                    1507      move.l  #SET_PEN_WIDTH_TASK, d0
00001A7E  7205                    1508      move.l  #PLAY_AREA_BORDER_WIDTH, d1
00001A80  4E4F                    1509      trap    #15
00001A82                          1510      
00001A82  7050                    1511      moveq.l #SET_PEN_COLOR_TASK, d0
00001A84  2239 000095EA           1512      move.l  (PlayAreaBoarderColor), d1
00001A8A  4E4F                    1513      trap    #15
00001A8C  7057                    1514      moveq.l #DRAW_RECT_TASK, d0
00001A8E  7232                    1515      move.l  #PLAY_AREA_LEFT_X, d1
00001A90  7400                    1516      move.l  #PLAY_AREA_TOP_Y, d2
00001A92  263C 0000014A           1517      move.l  #PLAY_AREA_RIGHT_X, d3
00001A98  283C 0000017B           1518      move.l  #PLAY_AREA_BOTTOM_Y, d4
00001A9E  4E4F                    1519      trap    #15
00001AA0                          1520      
00001AA0                          1521      ; Reset line width
00001AA0  705D                    1522      move.l  #SET_PEN_WIDTH_TASK, d0
00001AA2  7201                    1523      move.l  #1, d1
00001AA4  4E4F                    1524      trap    #15
00001AA6                          1525      
00001AA6                          1526      ; Paint target Line
00001AA6  7050                    1527      moveq.l #SET_PEN_COLOR_TASK, d0
00001AA8  223C 00FFFFFF           1528      move.l  #WHITE, d1
00001AAE  4E4F                    1529      trap    #15
00001AB0  7054                    1530      moveq.l #DRAW_LINE_START_END_TASK, d0
00001AB2  7232                    1531      moveq.l #TARGET_LINE_X1, d1
00001AB4  243C 00000156           1532      move.l  #TARGET_LINE_Y, d2
00001ABA  263C 0000014A           1533      move.l  #TARGET_LINE_X2, d3
00001AC0  283C 00000156           1534      move.l  #TARGET_LINE_Y, d4
00001AC6  4E4F                    1535      trap    #15
00001AC8                          1536      
00001AC8                          1537      ; Paint target line hammers -----------------------------------------------
00001AC8  7050                    1538      moveq.l #SET_PEN_COLOR_TASK, d0
00001ACA  223C 00FF3F3F           1539      move.l  #LANE1_HAMMER_COLOR, d1
00001AD0  4E4F                    1540      trap    #15
00001AD2  7057                    1541      moveq.l #DRAW_FILLED_OVAL_TASK, d0
00001AD4  724C                    1542      move.l  #(LANE1_X-(NOTE_WIDTH/2)), d1
00001AD6  243C 0000014A           1543      move.l  #(HAMMER_Y-(NOTE_SIZE/2)), d2
00001ADC  7674                    1544      move.l  #(LANE1_X+(NOTE_WIDTH/2)), d3
00001ADE  283C 00000162           1545      move.l  #(HAMMER_Y+(NOTE_SIZE/2)), d4
00001AE4  4E4F                    1546      trap    #15
00001AE6                          1547      
00001AE6  7050                    1548      moveq.l #SET_PEN_COLOR_TASK, d0
00001AE8  223C 003FFF43           1549      move.l  #LANE2_HAMMER_COLOR, d1
00001AEE  4E4F                    1550      trap    #15
00001AF0  7057                    1551      moveq.l #DRAW_FILLED_OVAL_TASK, d0
00001AF2  727A                    1552      move.l  #(LANE2_X-(NOTE_WIDTH/2)), d1
00001AF4  243C 0000014A           1553      move.l  #(HAMMER_Y-(NOTE_SIZE/2)), d2
00001AFA  263C 000000A2           1554      move.l  #(LANE2_X+(NOTE_WIDTH/2)), d3
00001B00  283C 00000162           1555      move.l  #(HAMMER_Y+(NOTE_SIZE/2)), d4
00001B06  4E4F                    1556      trap    #15
00001B08                          1557      
00001B08  7050                    1558      moveq.l #SET_PEN_COLOR_TASK, d0
00001B0A  223C 00433FFF           1559      move.l  #LANE3_HAMMER_COLOR, d1
00001B10  4E4F                    1560      trap    #15
00001B12  7057                    1561      moveq.l #DRAW_FILLED_OVAL_TASK, d0
00001B14  223C 000000A8           1562      move.l  #(LANE3_X-(NOTE_WIDTH/2)), d1
00001B1A  243C 0000014A           1563      move.l  #(HAMMER_Y-(NOTE_SIZE/2)), d2
00001B20  263C 000000D0           1564      move.l  #(LANE3_X+(NOTE_WIDTH/2)), d3
00001B26  283C 00000162           1565      move.l  #(HAMMER_Y+(NOTE_SIZE/2)), d4
00001B2C  4E4F                    1566      trap    #15
00001B2E                          1567      
00001B2E  7050                    1568      moveq.l #SET_PEN_COLOR_TASK, d0
00001B30  223C 000075FF           1569      move.l  #LANE4_HAMMER_COLOR, d1
00001B36  4E4F                    1570      trap    #15
00001B38  7057                    1571      moveq.l #DRAW_FILLED_OVAL_TASK, d0
00001B3A  223C 000000D6           1572      move.l  #(LANE4_X-(NOTE_WIDTH/2)), d1
00001B40  243C 0000014A           1573      move.l  #(HAMMER_Y-(NOTE_SIZE/2)), d2
00001B46  263C 000000FE           1574      move.l  #(LANE4_X+(NOTE_WIDTH/2)), d3
00001B4C  283C 00000162           1575      move.l  #(HAMMER_Y+(NOTE_SIZE/2)), d4
00001B52  4E4F                    1576      trap    #15
00001B54                          1577      
00001B54  7050                    1578      moveq.l #SET_PEN_COLOR_TASK, d0
00001B56  223C 0000FFFF           1579      move.l  #LANE5_HAMMER_COLOR, d1
00001B5C  4E4F                    1580      trap    #15
00001B5E  7057                    1581      moveq.l #DRAW_FILLED_OVAL_TASK, d0
00001B60  223C 00000104           1582      move.l  #(LANE5_X-(NOTE_WIDTH/2)), d1
00001B66  243C 0000014A           1583      move.l  #(HAMMER_Y-(NOTE_SIZE/2)), d2
00001B6C  263C 0000012C           1584      move.l  #(LANE5_X+(NOTE_WIDTH/2)), d3
00001B72  283C 00000162           1585      move.l  #(HAMMER_Y+(NOTE_SIZE/2)), d4
00001B78  4E4F                    1586      trap    #15
00001B7A                          1587      ; -------------------------------------------------------------------------
00001B7A                          1588      
00001B7A                          1589      ; Reset Pen color
00001B7A  7050                    1590      moveq.l #SET_PEN_COLOR_TASK, d0
00001B7C  223C 00FFFFFF           1591      move.l  #WHITE, d1
00001B82  4E4F                    1592      trap    #15
00001B84                          1593      
00001B84  4E75                    1594      rts
00001B86                          1595  
00001B86                          1596  
00001B86= 0000185A 000018BC ...   1597  DRAW_NOTE_ROUTINE_TABLE         dc.l DRAW_NOTE_LANE1, DRAW_NOTE_LANE2, DRAW_NOTE_LANE3, DRAW_NOTE_LANE4, DRAW_NOTE_LANE5
00001B9A                          1598  
00001B9A                          1599  
00001B9A                          1600  
00001B9A                          1601  
00001B9A                          1602  
00001B9A                          1603  
00001B9A                          1604  
00001B9A                          1605  
00001B9A                          1606  
00001B9A                          1607  
00001B9A                          1608  
00001B9A                          1609  
00001B9A                          1610  
00001B9A                          1611  
00001B9A                          1612  
00001B9A                          1613  
00001B9A                          1614  
00001B9A                          1615  
00001B9A                          1616  
00001B9A                          1617  
00001B9A                          1618  
00001B9A                          1619  
00001B9A                          1620  
00001B9A                          1621  
00001B9A                          1622  
00001B9A                          1623  
00001B9A                          1624  
00001B9A                          1625  
00001B9A                          1626  
00001B9A                          1627  
00001B9A                          1628  
00001B9A                          1629  
00001B9A                          1630  
00001B9A                          1631  
00001B9A                          1632  
00001B9A                          1633  
00001B9A                          1634  -------------------- end include --------------------
00001B9A                          1635      INCLUDE     "EndSongManager.X68"
00001B9A                          1636  
00001B9A                          1637  ; Displays all of the song stats
00001B9A                          1638  SONG_ENDING_SEQUENCE:
00001B9A                          1639      ; Display stats window ----------------------------------------------------
00001B9A  7050                    1640      move.l  #SET_PEN_COLOR_TASK, d0
00001B9C  7200                    1641      move.l  #0, d1
00001B9E  4E4F                    1642      trap    #15
00001BA0  7051                    1643      move.l  #SET_PEN_FILL_COLOR_TASK, d0
00001BA2  223C 00FFFFFF           1644      move.l  #WHITE, d1
00001BA8  4E4F                    1645      trap    #15
00001BAA  705D                    1646      move.l  #SET_PEN_WIDTH_TASK, d0
00001BAC  7203                    1647      move.l  #3, d1
00001BAE  4E4F                    1648      trap    #15
00001BB0                          1649  
00001BB0  7057                    1650      move.l  #DRAW_RECT_TASK, d0
00001BB2  223C 0000009B           1651      move.l  #(SCREEN_WIDTH/2-(STATS_OUTER_BOX_WIDTH/2)), d1
00001BB8  744B                    1652      move.l  #(SCREEN_HEIGHT/2-(STATS_OUTER_BOX_HEIGHT/2)), d2
00001BBA  263C 000001E5           1653      move.l  #(SCREEN_WIDTH/2+(STATS_OUTER_BOX_WIDTH/2)), d3
00001BC0  283C 00000195           1654      move.l  #(SCREEN_HEIGHT/2+(STATS_OUTER_BOX_HEIGHT/2)), d4
00001BC6  4E4F                    1655      trap    #15
00001BC8                          1656      
00001BC8  7051                    1657      move.l  #SET_PEN_FILL_COLOR_TASK, d0
00001BCA  7200                    1658      move.l  #0, d1
00001BCC  4E4F                    1659      trap    #15
00001BCE  7057                    1660      move.l  #DRAW_RECT_TASK, d0
00001BD0  223C 000000AA           1661      move.l  #(SCREEN_WIDTH/2-(STATS_INNER_BOX_WIDTH/2)), d1
00001BD6  745F                    1662      move.l  #(SCREEN_HEIGHT/2-(STATS_OUTER_BOX_HEIGHT/2)+STATS_BOXES_TOP_PADDING), d2
00001BD8  263C 000001D6           1663      move.l  #(SCREEN_WIDTH/2+(STATS_INNER_BOX_WIDTH/2)), d3
00001BDE  2801                    1664      move.l  d1, d4
00001BE0  0684 000000B4           1665      add.l   #STATS_INNER_BOX_HEIGHT, d4
00001BE6  4E4F                    1666      trap    #15
00001BE8                          1667      ; Display Info strings ----------------------------------------------------
00001BE8                          1668  
00001BE8                          1669      ; Set font
00001BE8  7015                    1670      move.l  #SET_FONT_PROPERTIES_TASK, d0
00001BEA  223C 00BF6D35           1671      move.l  #STATS_FONT_COLOR, d1
00001BF0  243C 04140001           1672      move.l  #STATS_INNER_FONT_STYLE, d2
00001BF6  4E4F                    1673      trap    #15
00001BF8                          1674      
00001BF8                          1675      
00001BF8                          1676      ; Display stat strings with their corrasponding number --------------------
00001BF8  7E00                    1677      move.l  #0, d7
00001BFA  45F9 0000202C           1678      lea     StatStrings, a2
00001C00  47F9 00001FDE           1679      lea     Stats, a3
00001C06                          1680      
00001C06                          1681      
00001C06  7A65                    1682      move.l  #STATS_INNER_TEXT_Y, d5
00001C08  3C3C 1804               1683      move.w  #((STATS_INNER_NUMBER_X<<BITS_IN_BYTE)+STATS_INNER_NUMBER_Y), d6
00001C0C                          1684  DISPLAY_STATS:
00001C0C                          1685      
00001C0C                          1686      ; Display stat string
00001C0C  705F                    1687      move.l  #PRINT_STRING_PIXEL_POS_TASK, d0
00001C0E  223C 000000B2           1688      move.l  #(STATS_INNER_TEXT_X+STATS_INNER_TEXT_PADDING), d1
00001C14  2405                    1689      move.l  d5, d2
00001C16  2252                    1690      move.l  (a2), a1
00001C18  4E4F                    1691      trap    #15
00001C1A                          1692      
00001C1A                          1693      ; Display stat number
00001C1A  700B                    1694      move.l  #SET_CURSOR_TASK, d0
00001C1C  3206                    1695      move.w  d6, d1
00001C1E  4E4F                    1696      trap    #15
00001C20  7014                    1697      move.l  #PRINT_SIGNED_NUMBER_TASK, d0
00001C22  2853                    1698      move.l  (a3), a4
00001C24  2214                    1699      move.l  (a4), d1
00001C26  7403                    1700      move.l  #STATS_INNER_NUMBER_COLUMNS, d2
00001C28  4E4F                    1701      trap    #15
00001C2A                          1702      
00001C2A                          1703      
00001C2A  588A                    1704      add.l   #BYTES_IN_LONG, a2
00001C2C  588B                    1705      add.l   #BYTES_IN_LONG, a3
00001C2E  5287                    1706      add.l   #1, d7
00001C30                          1707      
00001C30                          1708      ; Update Y string value
00001C30  0685 00000037           1709      add.l   #STATS_INNER_TEXT_LINE_SIZE, d5
00001C36                          1710      
00001C36                          1711      ; Updata Y number value
00001C36  5486                    1712      add.l   #STATS_INNER_NUMBER_Y_OFFSET, d6
00001C38                          1713      
00001C38  BEBC 00000005           1714      cmp.l   #STAT_STRING_AMOUNT, d7
00001C3E  6DCC                    1715      blt     DISPLAY_STATS
00001C40                          1716      
00001C40                          1717      ; Display End Song options ------------------------------------------------
00001C40  7051                    1718      move.l  #SET_PEN_FILL_COLOR_TASK, d0
00001C42  223C 00FFFFFF           1719      move.l  #WHITE, d1
00001C48  4E4F                    1720      trap    #15
00001C4A  7015                    1721      move.l  #SET_FONT_PROPERTIES_TASK, d0
00001C4C  223C 00BF6D35           1722      move.l  #STATS_FONT_COLOR, d1
00001C52  243C 04090001           1723      move.l  #STATS_OUTER_FONT_STYLE, d2
00001C58  4E4F                    1724      trap    #15
00001C5A                          1725      ; Display Replay String
00001C5A  705F                    1726      move.l  #PRINT_STRING_PIXEL_POS_TASK, d0
00001C5C  43F9 00002069           1727      lea     ReplayString, a1
00001C62  223C 000000AA           1728      move.l  #(STATS_OUTER_TEXT_X), d1
00001C68  243C 00000186           1729      move.l  #(STATS_OUTER_TEXT_Y), d2
00001C6E  4E4F                    1730      trap    #15
00001C70                          1731      ; Display Level Select String
00001C70  705F                    1732      move.l  #PRINT_STRING_PIXEL_POS_TASK, d0
00001C72  43F9 00002072           1733      lea     LevelSelectString, a1
00001C78  223C 000000FA           1734      move.l  #(STATS_OUTER_TEXT_X+LEVEL_SELECT_OFFSET), d1
00001C7E  243C 00000186           1735      move.l  #(STATS_OUTER_TEXT_Y), d2
00001C84  4E4F                    1736      trap    #15
00001C86                          1737      ; Display Exit game String
00001C86  705F                    1738      move.l  #PRINT_STRING_PIXEL_POS_TASK, d0
00001C88  43F9 00002080           1739      lea     ExitGameString, a1
00001C8E  223C 00000172           1740      move.l  #(STATS_OUTER_TEXT_X+EXIT_GAME_OFFSET), d1
00001C94  243C 00000186           1741      move.l  #(STATS_OUTER_TEXT_Y), d2
00001C9A  4E4F                    1742      trap    #15
00001C9C                          1743      
00001C9C                          1744      ; Display completion percent and high score message -----------------------
00001C9C  7600                    1745      moveq.l #0, d3
00001C9E                          1746      
00001C9E  2039 00001FCE           1747      move.l  (EndNotesHit), d0
00001CA4  2239 00001FCA           1748      move.l  (EndTotalNotes), d1
00001CAA                          1749      
00001CAA                          1750      ; (Notes hit * 100) / Total notes
00001CAA  C0FC 0064               1751      mulu    #100, d0
00001CAE  80C1                    1752      divu    d1, d0                      ; Percentage of song complete
00001CB0  4840                    1753      swap    d0
00001CB2  303C 0000               1754      move.w  #0, d0
00001CB6  4840                    1755      swap    d0
00001CB8                          1756      
00001CB8                          1757      ; Get the ones place
00001CB8  80FC 000A               1758      divu    #10, d0
00001CBC  4840                    1759      swap    d0
00001CBE  3200                    1760      move.w  d0, d1                          ; Ones place -> d1
00001CC0  303C 0000               1761      move.w  #0, d0
00001CC4  4840                    1762      swap    d0
00001CC6                          1763  
00001CC6                          1764      ; Get the Hundreds and tens place
00001CC6  80FC 000A               1765      divu    #10, d0
00001CCA  3600                    1766      move.w  d0, d3                          ; Hundreds place -> d3
00001CCC  4840                    1767      swap    d0
00001CCE  3400                    1768      move.w  d0, d2                          ; Tens place -> d2
00001CD0                          1769      
00001CD0                          1770      
00001CD0                          1771      ; Create percentage value string
00001CD0  41F9 00002052           1772      lea     ReportCompletionString, a0
00001CD6  D1FC 00000012           1773      add.l   #COMPLETION_PERCENT_OFFSET, a0
00001CDC                          1774      
00001CDC  0683 00000030           1775      add.l   #START_OF_ASCII_NUMBERS, d3
00001CE2  10C3                    1776      move.b  d3, (a0)+                       ; Push hundreds place to string
00001CE4  0682 00000030           1777      add.l   #START_OF_ASCII_NUMBERS, d2
00001CEA  10C2                    1778      move.b  d2, (a0)+                       ; Push tens place to string
00001CEC  0681 00000030           1779      add.l   #START_OF_ASCII_NUMBERS, d1
00001CF2  10C1                    1780      move.b  d1, (a0)+                       ; Push ones place to string
00001CF4                          1781      
00001CF4  705F                    1782      move.l  #PRINT_STRING_PIXEL_POS_TASK, d0
00001CF6  43F9 00002052           1783      lea     ReportCompletionString, a1      ; Display built completion string
00001CFC  223C 000000AA           1784      move.l  #COMPLETION_TEXT_X, d1
00001D02  243C 00000172           1785      move.l  #COMPLETION_TEXT_Y, d2
00001D08  4E4F                    1786      trap    #15
00001D0A                          1787      
00001D0A                          1788      ; Output (HighscoreAchieved) - Flag set to 1 if a high score percent was set
00001D0A  4EB9 0000208C           1789      jsr     SAVE_SONG_INFORMATION           ; Save completion percent if higher
00001D10                          1790      
00001D10  0CB9 00000001 00002808  1791      cmp.l   #1, (HighscoreAchieved)
00001D1A  6600 0018               1792      bne     SKIP_DISPLAY_HIGHSCORE_MESSAGE
00001D1E                          1793      
00001D1E  705F                    1794      move.l  #PRINT_STRING_PIXEL_POS_TASK, d0
00001D20  43F9 00002040           1795      lea     HighScoreString, a1
00001D26  223C 000000AA           1796      move.l  #HIGHSCORE_TEXT_X, d1
00001D2C  243C 00000163           1797      move.l  #HIGHSCORE_TEXT_Y, d2
00001D32  4E4F                    1798      trap    #15
00001D34                          1799      
00001D34                          1800  SKIP_DISPLAY_HIGHSCORE_MESSAGE
00001D34                          1801      ; Reset fill color
00001D34  7051                    1802      move.l  #SET_PEN_FILL_COLOR_TASK, d0
00001D36  7200                    1803      move.l  #0, d1
00001D38  4E4F                    1804      trap    #15
00001D3A                          1805      
00001D3A                          1806      
00001D3A  4EB9 00001DB6           1807      jsr     RESET_LEVEL_DATA
00001D40                          1808      
00001D40                          1809      ; Wait for a small amount to prevent clicking an option right after play
00001D40  7017                    1810      move.l  #DELAY_TASK, d0
00001D42  7219                    1811      move.l  #25, d1
00001D44  4E4F                    1812      trap    #15
00001D46                          1813      
00001D46  4E75                    1814      rts
00001D48                          1815      
00001D48                          1816      ; Loop handing actions during stat report
00001D48                          1817  END_GAME_LOOP:
00001D48                          1818      ; Get Inputs
00001D48  7013                    1819      moveq.l #KEY_INPUT_TASK, d0
00001D4A  223C 31323334           1820      move.l  #LEVEL_TARGET_INPUTS, d1
00001D50  4E4F                    1821      trap    #15
00001D52                          1822      
00001D52  4EB9 00001D5A           1823      jsr     PROCESS_END_INPUTS
00001D58                          1824  
00001D58  4E75                    1825      rts
00001D5A                          1826      
00001D5A                          1827      
00001D5A                          1828  PROCESS_END_INPUTS:
00001D5A  2039 00002822           1829      move.l  (HeldInputs), d0
00001D60  23C1 00002822           1830      move.l  d1, (HeldInputs)                ; Add all bits currently pressed to held inputs flag
00001D66  4680                    1831      not.l   d0                              ; NOT all bits 
00001D68  C280                    1832      and.l   d0, d1                          ; Remove all inputs held down creating OnPress behavior
00001D6A                          1833  
00001D6A                          1834      
00001D6A  0801 0018               1835      btst.l  #ONE_PRESSED_BIT_OFFSET, d1       ; Compares '1' bit with 0
00001D6E  6700 0016               1836      beq     ONE_NOT_PRESSED_END               ; Branch if '1' not pressed '1' bit == 0
00001D72                          1837     
00001D72  23FC 00000001 00002810  1838      move.l  #1, (RetrySong)
00001D7C                          1839      
00001D7C                          1840      ; Play button sound
00001D7C  7049                    1841      move.l  #PLAY_SOUND_DIRECTX_TASK, d0
00001D7E  43F9 00002892           1842      lea     CassetteTapeRestart, a1
00001D84  4E4F                    1843      trap    #15
00001D86                          1844      
00001D86                          1845  ONE_NOT_PRESSED_END:
00001D86  0801 0010               1846      btst.l  #TWO_PRESSED_BIT_OFFSET, d1       ; Compares '2' bit with 0
00001D8A  6700 0016               1847      beq     TWO_NOT_PRESSED_END               ; Branch if '2' not pressed '2' bit == 0
00001D8E                          1848  
00001D8E  23FC 00000001 00002814  1849      move.l  #1, (LevelSelect)
00001D98                          1850      
00001D98                          1851      ; Play button sound
00001D98  7049                    1852      move.l  #PLAY_SOUND_DIRECTX_TASK, d0
00001D9A  43F9 000028B2           1853      lea     CassetteTapeEject, a1
00001DA0  4E4F                    1854      trap    #15
00001DA2                          1855  
00001DA2                          1856  TWO_NOT_PRESSED_END:
00001DA2  0801 0008               1857      btst.l  #THREE_PRESSED_BIT_OFFSET, d1       ; Compares '3' bit with 0
00001DA6  6700 000C               1858      beq     THREE_NOT_PRESSED_END               ; Branch if '3' not pressed '3' bit == 0
00001DAA                          1859      
00001DAA  23FC 00000001 00002818  1860      move.l  #1, (ExitGame)
00001DB4                          1861  
00001DB4                          1862  THREE_NOT_PRESSED_END:
00001DB4  4E75                    1863      rts
00001DB6                          1864      
00001DB6                          1865      
00001DB6                          1866  ; Resets all variables to be ready for use for retrys and back to song selection
00001DB6                          1867  RESET_LEVEL_DATA:
00001DB6  23FC 00000000 00002802  1868      move.l  #0, (TimeElapsed)
00001DC0                          1869      
00001DC0  13FC 0000 00002807      1870      move.b  #0, (SongFinished)
00001DC8  23FC 00000000 00002810  1871      move.l  #0, (RetrySong)
00001DD2  23FC 00000000 00002814  1872      move.l  #0, (LevelSelect)
00001DDC  23FC 00000000 00002818  1873      move.l  #0, (ExitGame)             
00001DE6  13FC 0000 00002806      1874      move.b  #0, (ReadyForGame)
00001DEE                          1875                              
00001DEE  23FC 000046A0 0000566A  1876      move.l  #SongLane1Timings, (CurrentLane1Timing)
00001DF8  23FC 0000566E 00006638  1877      move.l  #SongLane2Timings, (CurrentLane2Timing)
00001E02  23FC 0000663C 00007606  1878      move.l  #SongLane3Timings, (CurrentLane3Timing)
00001E0C  23FC 0000760A 000085D4  1879      move.l  #SongLane4Timings, (CurrentLane4Timing)
00001E16  23FC 000085D8 000095A2  1880      move.l  #SongLane5Timings, (CurrentLane5Timing) 
00001E20                          1881      
00001E20  41F9 000095A6           1882      lea     SongLaneTimingTable, a0
00001E26  5888                    1883      add.l   #4, a0
00001E28                          1884      ; Reset to begining of timing table
00001E28  20BC 000046A0           1885      move.l  #SongLane1Timings, (a0)
00001E2E  5888                    1886      add.l   #4, a0
00001E30  20BC 0000566E           1887      move.l  #SongLane2Timings, (a0)
00001E36  5888                    1888      add.l   #4, a0
00001E38  20BC 0000663C           1889      move.l  #SongLane3Timings, (a0)
00001E3E  5888                    1890      add.l   #4, a0
00001E40  20BC 0000760A           1891      move.l  #SongLane4Timings, (a0)
00001E46  5888                    1892      add.l   #4, a0
00001E48  20BC 000085D8           1893      move.l  #SongLane5Timings, (a0)
00001E4E                          1894                                 
00001E4E  23FC 0000FFFF 000095EA  1895      move.l  #DECENT_COLOR, (PlayAreaBoarderColor)
00001E58                          1896      
00001E58  23FC 00000000 0000A5B6  1897      move.l  #0, (OldestLane1NoteOffset)
00001E62  23FC 000095EE 0000A5BA  1898      move.l  #Lane1NotePosTable, (Lane1CurrentNote)
00001E6C  23FC FFFFFFFF 0000A5BE  1899      move.l  #-1, (Lane1CurrentNoteIndex)
00001E76                          1900      
00001E76  23FC 00000000 0000B58A  1901      move.l  #0, (OldestLane2NoteOffset)
00001E80  23FC 0000A5C2 0000B58E  1902      move.l  #Lane2NotePosTable, (Lane2CurrentNote)
00001E8A  23FC FFFFFFFF 0000B592  1903      move.l  #-1, (Lane2CurrentNoteIndex)
00001E94                          1904  
00001E94  23FC 00000000 0000C55E  1905      move.l  #0, (OldestLane3NoteOffset)
00001E9E  23FC 0000B596 0000C562  1906      move.l  #Lane3NotePosTable, (Lane3CurrentNote)
00001EA8  23FC FFFFFFFF 0000C566  1907      move.l  #-1, (Lane3CurrentNoteIndex)
00001EB2                          1908  
00001EB2  23FC 00000000 0000D532  1909      move.l  #0, (OldestLane4NoteOffset)
00001EBC  23FC 0000C56A 0000D536  1910      move.l  #Lane4NotePosTable, (Lane4CurrentNote)
00001EC6  23FC FFFFFFFF 0000D53A  1911      move.l  #-1, (Lane4CurrentNoteIndex)
00001ED0                          1912  
00001ED0  23FC 00000000 0000E506  1913      move.l  #0, (OldestLane5NoteOffset)
00001EDA  23FC 0000D53E 0000E50A  1914      move.l  #Lane5NotePosTable, (Lane5CurrentNote)
00001EE4  23FC FFFFFFFF 0000E50E  1915      move.l  #-1, (Lane5CurrentNoteIndex)
00001EEE                          1916      
00001EEE  23FC 00000000 000027EA  1917      move.l  #0, (PerformancePositiveModifier)
00001EF8  23FC 00000000 000027EE  1918      move.l  #0, (PerformanceNegativeModifier)
00001F02  23FC 00000004 000027F2  1919      move.l  #PERFORMANCE_DECENT, (CurrentPerformance)
00001F0C  23FC 00000050 000027F6  1920      move.l  #(PERFORMANCE_STATE_SCORE_SIZE*PERFORMANCE_DECENT), (PerformanceScore)
00001F16                          1921      
00001F16  23FC 00000000 00002808  1922      move.l  #0, (HighscoreAchieved)
00001F20                          1923      
00001F20  23FC 00000000 00001FCA  1924      move.l  #0, (EndTotalNotes)
00001F2A  23FC 00000000 00001FCE  1925      move.l  #0, (EndNotesHit)
00001F34  23FC 00000000 00001FD2  1926      move.l  #0, (EndNotesMissed)
00001F3E  23FC 00000000 00001FD6  1927      move.l  #0, (EndBestCombo)
00001F48  23FC 00000000 00001FDA  1928      move.l  #0, (EndOverstrums)
00001F52                          1929      
00001F52                          1930      ; reset cursor
00001F52  700B                    1931      move.l  #SET_CURSOR_TASK, d0
00001F54  7200                    1932      move.l  #0, d1
00001F56  4E4F                    1933      trap    #15
00001F58                          1934      
00001F58                          1935      ; Reset Note positions
00001F58  7000                    1936      move.l  #0, d0
00001F5A                          1937  NEXT_NOTE_POSITION_TABLE:    
00001F5A  41F9 0000E512           1938      lea     LanePosTables, a0
00001F60  41F0 0000               1939      lea     (a0, d0), a0
00001F64  2050                    1940      move.l  (a0), a0
00001F66                          1941      
00001F66  43F9 0000E526           1942      lea     OldestLaneNotes, a1
00001F6C  43F1 0000               1943      lea     (a1, d0), a1
00001F70  2251                    1944      move.l  (a1), a1
00001F72                          1945  RESET_NOTE_POSITIONS:
00001F72  20FC FFFFDB00           1946      move.l  #(NOTE_SPAWN_Y<<FIXED_POINT_BITS), (a0)+
00001F78  B1C9                    1947      cmp.l   a1, a0
00001F7A  6DF6                    1948      blt     RESET_NOTE_POSITIONS
00001F7C  5880                    1949      add.l   #4, d0
00001F7E  B0BC 00000010           1950      cmp.l   #16, d0
00001F84  6FD4                    1951      ble     NEXT_NOTE_POSITION_TABLE
00001F86                          1952      
00001F86                          1953      
00001F86                          1954      ; Reset note spawn timings
00001F86  7004                    1955      move.l  #4, d0
00001F88                          1956  NEXT_LANE_TIMING_TABLE:    
00001F88  41F9 000095A6           1957      lea     SongLaneTimingTable, a0
00001F8E  41F0 0000               1958      lea     (a0, d0), a0
00001F92  2050                    1959      move.l  (a0), a0
00001F94                          1960      
00001F94  43F9 000095BE           1961      lea     CurrentLaneTimings, a1
00001F9A  43F1 0000               1962      lea     (a1, d0), a1
00001F9E  5989                    1963      sub.l   #4, a1
00001FA0  2251                    1964      move.l  (a1), a1
00001FA2                          1965  RESET_LANE_TIMING:
00001FA2  10FC 00FF               1966      move.b  #$FF, (a0)+
00001FA6  B1C9                    1967      cmp.l   a1, a0
00001FA8  6DF8                    1968      blt     RESET_LANE_TIMING    
00001FAA  5880                    1969      add.l   #4, d0
00001FAC  B0BC 00000014           1970      cmp.l   #20, d0
00001FB2  6FD4                    1971      ble     NEXT_LANE_TIMING_TABLE
00001FB4                          1972  
00001FB4  23FC 00000000 000095DE  1973      move.l  #0, (CurrentCombo)
00001FBE                          1974  
00001FBE  23FC 00017700 000095E6  1975      move.l  #(PROGRESS_BAR_BOTTOM_Y<<FIXED_POINT_BITS), (ProgressBarFillHeightPos)
00001FC8                          1976  
00001FC8                          1977  
00001FC8  4E75                    1978      rts
00001FCA                          1979  
00001FCA                          1980      
00001FCA= 00000000                1981  EndTotalNotes           dc.l 0
00001FCE= 00000000                1982  EndNotesHit             dc.l 0
00001FD2= 00000000                1983  EndNotesMissed          dc.l 0
00001FD6= 00000000                1984  EndBestCombo            dc.l 0
00001FDA= 00000000                1985  EndOverstrums           dc.l 0
00001FDE= 00001FCA 00001FCE ...   1986  Stats                   dc.l EndTotalNotes, EndNotesHit, EndNotesMissed
00001FEA= 00001FD6 00001FDA       1987                          dc.l EndBestCombo, EndOverstrums
00001FF2                          1988  
00001FF2= 54 6F 74 61 6C 20 ...   1989  TotalNotesString        dc.b 'Total Notes',0
00001FFE= 4E 6F 74 65 73 20 ...   1990  NotesHitString          dc.b 'Notes Hit',0
00002008= 4E 6F 74 65 73 20 ...   1991  NotesMissedString       dc.b 'Notes Missed',0
00002015= 42 65 73 74 20 43 ...   1992  BestComboString         dc.b 'Best Combo',0
00002020= 4F 76 65 72 73 74 ...   1993  OverstrumsString        dc.b 'Overstrums',0
0000202C= 00001FF2 00001FFE ...   1994  StatStrings             dc.l TotalNotesString, NotesHitString, NotesMissedString
00002038= 00002015 00002020       1995                          dc.l BestComboString, OverstrumsString
00002040                          1996  
00002040= 4E 45 57 20 48 49 ...   1997  HighScoreString         dc.b 'NEW HIGH SCORE!!!',0
00002052= 4E 6F 74 65 20 43 ...   1998  ReportCompletionString  dc.b 'Note Completion -    %',0
00002069= 31 3A 52 65 70 6C ...   1999  ReplayString            dc.b '1:Replay',0
00002072= 32 3A 53 6F 6E 67 ...   2000  LevelSelectString       dc.b '2:Song Select',0
00002080= 33 3A 45 78 69 74 ...   2001  ExitGameString          dc.b '3:Exit Game',0
0000208C                          2002                          ds.w 0
0000208C                          2003  
0000208C                          2004  
0000208C                          2005  
0000208C                          2006  
0000208C                          2007  
0000208C                          2008  
0000208C                          2009  
0000208C                          2010  
0000208C                          2011  -------------------- end include --------------------
0000208C                          2012      INCLUDE     "ScoreManager.X68"
0000208C                          2013     
0000208C                          2014     ; Saves the song stats into the saved data file
0000208C                          2015  SAVE_SONG_INFORMATION:
0000208C  4EB9 00002156           2016      jsr     OPEN_COMPLETION_FILE
00002092  23C1 000021BE           2017      move.l  d1, (FileID)
00002098                          2018      
00002098  2038 1FCE               2019      move.l  (EndNotesHit), d0
0000209C  2238 1FCA               2020      move.l  (EndTotalNotes), d1
000020A0                          2021      
000020A0                          2022      ; (Notes hit * 100) / Total notes
000020A0  C0FC 0064               2023      mulu    #100, d0
000020A4  80C1                    2024      divu    d1, d0                      ; Percentage of song complete
000020A6  1A00                    2025      move.b  d0, d5
000020A8                          2026      
000020A8                          2027      ; Position file cursor to data location for the selected song
000020A8  7037                    2028      move.l  #POSITION_FILE_TASK, d0
000020AA  2239 000021BE           2029      move.l  (FileID), d1
000020B0  2439 00004694           2030      move.l  (CurrentChoiceIndex), d2
000020B6  E48A                    2031      lsr.l   #2, d2                      ; Byte based indexing
000020B8  4E4F                    2032      trap    #15
000020BA                          2033      
000020BA                          2034      ; Read in the data currently there
000020BA  7035                    2035      move.l  #READ_FILE_TASK, d0
000020BC  2239 000021BE           2036      move.l  (FileID), d1
000020C2  7401                    2037      move.l  #1, d2
000020C4  43F9 000021C2           2038      lea     CompletionData, a1          ; Get data -> CompletionData
000020CA  4E4F                    2039      trap    #15
000020CC                          2040      
000020CC                          2041      ; Compare New data to previous data
000020CC  BA39 000021C2           2042      cmp.b   (CompletionData), d5        
000020D2  6F00 0036               2043      ble     SKIP_SET_NEW_SCORE          ; Branch and skip setting new score if previous is higher
000020D6                          2044      
000020D6  7037                    2045      move.l  #POSITION_FILE_TASK, d0
000020D8  2239 000021BE           2046      move.l  (FileID), d1
000020DE  2439 00004694           2047      move.l  (CurrentChoiceIndex), d2
000020E4  E48A                    2048      lsr.l   #2, d2                      ; Byte based indexing
000020E6  4E4F                    2049      trap    #15
000020E8                          2050      
000020E8                          2051      ; Update with new score
000020E8  13C5 000021C2           2052      move.b  d5, (CompletionData)        
000020EE  7036                    2053      move.l  #WRITE_FILE_TASK, d0
000020F0  43F9 000021C2           2054      lea     CompletionData, a1
000020F6  2239 000021BE           2055      move.l  (FileID), d1
000020FC  7401                    2056      move.l  #1, d2
000020FE  4E4F                    2057      trap    #15
00002100                          2058      
00002100  23FC 00000001 00002808  2059      move.l  #1, (HighscoreAchieved)
0000210A                          2060      
0000210A                          2061  SKIP_SET_NEW_SCORE:
0000210A  7038                    2062      move.l  #CLOSE_FILE_TASK, d0
0000210C  2239 000021BE           2063      move.l  (FileID), d1
00002112  4E4F                    2064      trap    #15
00002114                          2065      
00002114                          2066  
00002114  4E75                    2067      rts
00002116                          2068      
00002116                          2069      
00002116                          2070      ; Delete saved data file
00002116                          2071  DELETE_SONG_INFORMATION:
00002116  7038                    2072      move.l  #CLOSE_FILE_TASK, d0
00002118  2239 000021BE           2073      move.l  (FileID), d1
0000211E  4E4F                    2074      trap    #15
00002120                          2075      
00002120  7039                    2076      move.l  #DELETE_FILE_TASK, d0
00002122  43F9 000021A2           2077      lea     SongCompletionFile, a1
00002128  4E4F                    2078      trap    #15
0000212A                          2079  
0000212A  4E75                    2080      rts
0000212C                          2081      
0000212C                          2082      ; Input              d6 - Index to read from
0000212C                          2083      ; Output CompletionData - Data read from file
0000212C                          2084  READ_SONG_INFORMATION:
0000212C  4EB9 00002156           2085      jsr     OPEN_COMPLETION_FILE
00002132                          2086      
00002132                          2087      ; d1 - FileID
00002132  7037                    2088      move.l  #POSITION_FILE_TASK, d0
00002134  2406                    2089      move.l  d6, d2                      ; Move to desired song data location
00002136  4E4F                    2090      trap    #15
00002138                          2091      
00002138  7035                    2092      move.l  #READ_FILE_TASK, d0
0000213A  2239 000021BE           2093      move.l  (FileID), d1
00002140  7401                    2094      move.l  #1, d2
00002142  43F9 000021C2           2095      lea     CompletionData, a1          ; Get data -> CompletionData
00002148  4E4F                    2096      trap    #15
0000214A                          2097    
0000214A  7038                    2098      move.l  #CLOSE_FILE_TASK, d0
0000214C  2239 000021BE           2099      move.l  (FileID), d1
00002152  4E4F                    2100      trap    #15
00002154                          2101  
00002154  4E75                    2102      rts
00002156                          2103      
00002156                          2104      ; Return (FileID)
00002156                          2105  OPEN_COMPLETION_FILE:
00002156                          2106      ; Attempt to open an existing file
00002156  7033                    2107      move.l  #OPEN_EXISTING_FILE_TASK, d0
00002158  43F9 000021A2           2108      lea     SongCompletionFile, a1
0000215E  4E4F                    2109      trap    #15  
00002160                          2110      
00002160                          2111      ; Check fileID
00002160  B2BC FFFFFFFF           2112      cmp.l   #FILE_NOT_FOUND, d1
00002166  6600 0032               2113      bne     SKIP_CREATE_FILE            ; Branch and skip new file creation when fileID != FileNotFound
0000216A                          2114      
0000216A                          2115      ; Create and open new save data file
0000216A  7034                    2116      move.l  #OPEN_NEW_FILE_TASK, d0
0000216C  43F9 000021A2           2117      lea     SongCompletionFile, a1
00002172  4E4F                    2118      trap    #15
00002174                          2119      
00002174  23C1 000021BE           2120      move.l  d1, (FileID)
0000217A                          2121      
0000217A  7036                    2122      move.l  #WRITE_FILE_TASK, d0
0000217C  43F9 000021C3           2123      lea     EmptyFileData, a1
00002182  7414                    2124      move.l  #EMPTY_FILE_LENGTH, d2
00002184  4E4F                    2125      trap    #15
00002186                          2126      
00002186  7038                    2127      move.l  #CLOSE_FILE_TASK, d0
00002188  2239 000021BE           2128      move.l  (FileID), d1
0000218E  4E4F                    2129      trap    #15
00002190                          2130      
00002190  7033                    2131      move.l  #OPEN_EXISTING_FILE_TASK, d0
00002192  43F9 000021A2           2132      lea     SongCompletionFile, a1
00002198  4E4F                    2133      trap    #15
0000219A                          2134      
0000219A                          2135      
0000219A                          2136  SKIP_CREATE_FILE:
0000219A  23C1 000021BE           2137      move.l  d1, (FileID)
000021A0  4E75                    2138      rts
000021A2                          2139  
000021A2= 53 61 76 65 64 44 ...   2140  SongCompletionFile      dc.b    'SavedData/Songs.COMPLETIONS',0
000021BE                          2141  FileID                  ds.l    1
000021C2                          2142  CompletionData          ds.b    1
000021C3= 00 00 00 00 00 00 ...   2143  EmptyFileData           DCB.B   EMPTY_FILE_LENGTH,0
000021D8                          2144                          ds.w    0
000021D8                          2145      
000021D8                          2146      
000021D8                          2147      
000021D8                          2148      
000021D8                          2149  
000021D8                          2150  
000021D8                          2151  
000021D8                          2152  -------------------- end include --------------------
000021D8                          2153      INCLUDE     "GatoPhysicsHandler.X68"
000021D8                          2154  
000021D8                          2155  GATO_JUMP:
000021D8                          2156      ; Set init start time
000021D8  7008                    2157      moveq.l #GET_TIME_TASK, d0
000021DA  4E4F                    2158      trap    #15
000021DC  23C1 000027FE           2159      move.l  d1, (PreviousTime)
000021E2                          2160      
000021E2                          2161      ; Set up initial cat position
000021E2  203C 0000015E           2162      move.l  #(GATO_SCREEN_START_POS>>BITS_IN_WORD), d0
000021E8  E188                    2163      lsl.l   #FIXED_POINT_BITS, d0
000021EA  23C0 000022D2           2164      move.l  d0, (GatoX)
000021F0  203C 015E0177           2165      move.l  #(GATO_SCREEN_START_POS), d0
000021F6  48C0                    2166      ext.l   d0
000021F8  E188                    2167      lsl.l   #FIXED_POINT_BITS, d0
000021FA  23C0 000022CE           2168      move.l  d0, (GatoY)
00002200                          2169      
00002200  2A3C FFFFFA00           2170      move.l  #GATO_JUMP_ACCELERATION, d5         ; Starting jump velecity
00002206                          2171      
00002206                          2172  MOVE_GATO:
00002206  4EB9 000022D6           2173      jsr     GET_DELTA_TIME
0000220C  2E39 000027FA           2174      move.l  (DeltaTime), d7
00002212                          2175      
00002212  4EB9 0000223C           2176      jsr     UPDATE_GATO
00002218  4EB9 00002254           2177      jsr     DRAW_GATO
0000221E                          2178      
0000221E                          2179      ; Apply acceleration
0000221E  2807                    2180      move.l  d7, d4
00002220  C9C4                    2181      muls    d4, d4                              ; Time squared
00002222  C9FC 0001               2182      muls    #GRAVITY_ACCELERATION, d4           ; Apply delta time to acceleration 
00002226  DA84                    2183      add.l   d4, d5                              ; Update velocity 
00002228                          2184      
00002228                          2185      ; Ensure delta time 
00002228  7017                    2186      move.l  #DELAY_TASK, d0
0000222A  7201                    2187      move.l  #1, d1
0000222C  4E4F                    2188      trap    #15
0000222E                          2189      
0000222E                          2190      ; Check if cat fully moves offscreen and continue looping if not
0000222E  0CB9 00021400 000022CE  2191      cmp.l   #((SCREEN_HEIGHT+MAD_GATO_HEIGHT)<<FIXED_POINT_BITS), (GatoY)
00002238  6DCC                    2192      blt     MOVE_GATO
0000223A                          2193      
0000223A  4E75                    2194      rts
0000223C                          2195      
0000223C                          2196      ; Updates the cats position based on the current velocity
0000223C                          2197      ; Input d5 - Starting jump velocity
0000223C                          2198      ;       d7 - Delta time
0000223C                          2199  UPDATE_GATO: 
0000223C  41F9 0026CFCC           2200      lea     GatoMad, a0
00002242  43F9 0000E582           2201      lea     LevelBackground, a1
00002248                          2202  
00002248  2205                    2203      move.l  d5, d1
0000224A  C3C7                    2204      muls    d7, d1                              ; Apply delta time to velocity
0000224C  D3B9 000022CE           2205      add.l   d1, (GatoY)                         ; Update position
00002252                          2206      
00002252  4E75                    2207      rts
00002254                          2208      
00002254                          2209      ; Draws the background and cat based on the previous update
00002254                          2210      ; Input d5 - The last velocity update
00002254                          2211      ;       d7 - Delta time
00002254                          2212  DRAW_GATO:
00002254                          2213      
00002254                          2214      ; Get the last amount moved
00002254  2605                    2215      move.l  d5, d3
00002256  C7C7                    2216      muls    d7, d3
00002258  E08B                    2217      lsr.l   #FIXED_POINT_BITS, d3
0000225A                          2218      
0000225A  2239 000022D2           2219      move.l  (GatoX), d1
00002260  E089                    2220      lsr.l   #FIXED_POINT_BITS, d1
00002262  4841                    2221      swap    d1
00002264  2439 000022CE           2222      move.l  (GatoY), d2
0000226A  E08A                    2223      lsr.l   #FIXED_POINT_BITS, d2
0000226C  3202                    2224      move.w  d2, d1                              ; Screen start position
0000226E                          2225      
0000226E  9243                    2226      sub.w   d3, d1                              ; Subtract the last velocity update amount
00002270                          2227                       
00002270                          2228      ; Draw Background of the previous position
00002270  48E7 FFFE               2229      movem.l ALL_REG, -(sp)
00002274  2F01                    2230      move.l  d1, -(sp) ; Screen start Position
00002276  3F3C 003E               2231      move.w  #(MAD_GATO_BACKGROUND_HEIGHT), -(sp) ; Chunk height
0000227A  3F3C 0049               2232      move.w  #MAD_GATO_WIDTH, -(sp)               ; Chunk width
0000227E  2F01                    2233      move.l  d1, -(sp)                            ; Chunk start Position
00002280  2F09                    2234      move.l  a1, -(sp)                            ; Bitmap Address 
00002282  4EB9 0000232A           2235      jsr     DRAW_BITMAP_CHUNK
00002288  4FEF 0010               2236      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp      ; Fix stack
0000228C  4CDF 7FFF               2237      movem.l (sp)+, ALL_REG
00002290                          2238  
00002290  2239 000022D2           2239      move.l  (GatoX), d1
00002296  E089                    2240      lsr.l   #FIXED_POINT_BITS, d1
00002298  4841                    2241      swap    d1
0000229A  2439 000022CE           2242      move.l  (GatoY), d2
000022A0  E08A                    2243      lsr.l   #FIXED_POINT_BITS, d2
000022A2  3202                    2244      move.w  d2, d1                              ; Screen start position
000022A4                          2245      
000022A4                          2246      ; Draw cat in new position
000022A4  48E7 FFFE               2247      movem.l ALL_REG, -(sp)
000022A8  2F01                    2248      move.l  d1, -(sp)                           ; Screen start Position
000022AA  3F3C 0034               2249      move.w  #MAD_GATO_HEIGHT, -(sp)             ; Chunk height
000022AE  3F3C 0049               2250      move.w  #MAD_GATO_WIDTH, -(sp)              ; Chunk width
000022B2  2F3C 00000000           2251      move.l  #TOP_LEFT, -(sp)                           ; Chunk start Position
000022B8  2F08                    2252      move.l  a0, -(sp)                           ; Bitmap Address 
000022BA  4EB9 0000232A           2253      jsr     DRAW_BITMAP_CHUNK
000022C0  4FEF 0010               2254      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp     ; Fix stack
000022C4  4CDF 7FFF               2255      movem.l (sp)+, ALL_REG
000022C8                          2256      
000022C8                          2257      ; Update Screen
000022C8  705E                    2258      moveq.l #PAINT_BUFFER_SCREEN_TASK, d0
000022CA  4E4F                    2259      trap    #15
000022CC                          2260  
000022CC  4E75                    2261      rts
000022CE                          2262  
000022CE                          2263      
000022CE                          2264  GatoY       ds.l    1
000022D2                          2265  GatoX       ds.l    1
000022D6                          2266  
000022D6                          2267  
000022D6                          2268  
000022D6                          2269  
000022D6                          2270  
000022D6                          2271  
000022D6                          2272  
000022D6                          2273  
000022D6                          2274  
000022D6                          2275  
000022D6                          2276  
000022D6                          2277  
000022D6                          2278  
000022D6                          2279  
000022D6                          2280  
000022D6                          2281  
000022D6                          2282  
000022D6                          2283  
000022D6                          2284  
000022D6                          2285  
000022D6                          2286  
000022D6                          2287  
000022D6                          2288  -------------------- end include --------------------
000022D6                          2289      INCLUDE     "SystemClock.X68"
000022D6                          2290  
000022D6                          2291  GET_DELTA_TIME:    
000022D6  7008                    2292      moveq.l #GET_TIME_TASK, d0
000022D8  4E4F                    2293      trap    #15                 ; New current time -> d1
000022DA  2401                    2294      move.l  d1, d2              ; Save for next PreviousTime
000022DC                          2295      
000022DC  92B9 000027FE           2296      sub.l   (PreviousTime), d1  ; Current - prev
000022E2  23C2 000027FE           2297      move.l  d2, (PreviousTime)  ; Update with new Previous time
000022E8                          2298      
000022E8  23C1 000027FA           2299      move.l  d1, (DeltaTime)     ; Update Delta Time
000022EE                          2300      
000022EE  4E75                    2301      rts
000022F0                          2302  
000022F0                          2303  
000022F0                          2304  -------------------- end include --------------------
000022F0                          2305      INCLUDE     "RandomNumberGenerator.X68"
000022F0                          2306      
000022F0                          2307  ; Generates a seed based on current time
000022F0                          2308  GENERATE_RANDOM_NUMBER_SEED
000022F0  7008                    2309      move.l  #GET_TIME_TASK, d0
000022F2  4E4F                    2310      trap    #15
000022F4                          2311      
000022F4  23C1 00002326           2312      move.l  d1, (RandomNumberSeed)
000022FA  4E75                    2313      rts
000022FC                          2314      
000022FC                          2315      ; Gets a random number from 0-5 -> 6 total possibilitis
000022FC                          2316  GET_RANDOM_0_5_D7
000022FC  2039 00002326           2317      move.l  (RandomNumberSeed), d0
00002302  72B1                    2318      moveq   #-79, d1
00002304  7412                    2319      moveq   #18, d2
00002306                          2320  
00002306                          2321  
00002306                          2322  NINC0   
00002306  D080                    2323      add.l   d0, d0
00002308  6400 0004               2324      bcc     NINC1
0000230C                          2325      
0000230C  B300                    2326      eor.b   d1, d0
0000230E                          2327  NINC1
0000230E  51CA FFF6               2328      dbra    d2, NINC0
00002312                          2329  
00002312                          2330      ; Get the remeinder to get number between 0-5
00002312  23C0 00002326           2331      move.l  d0, (RandomNumberSeed)
00002318  4287                    2332      clr.l   d7
0000231A  1E00                    2333      move.b  d0, d7
0000231C  8EFC 0006               2334      divu    #6, d7
00002320  4847                    2335      swap    d7                      
00002322  48C7                    2336      ext.l   d7        
00002324                          2337  
00002324  4E75                    2338      rts
00002326                          2339  
00002326                          2340  
00002326                          2341  RandomNumberSeed        ds.l    1
0000232A                          2342  
0000232A                          2343  
0000232A                          2344  
0000232A                          2345  
0000232A                          2346  
0000232A                          2347  
0000232A                          2348  
0000232A                          2349  
0000232A                          2350  
0000232A                          2351  
0000232A                          2352  
0000232A                          2353  
0000232A                          2354  
0000232A                          2355  
0000232A                          2356  
0000232A                          2357  
0000232A                          2358  
0000232A                          2359  
0000232A                          2360  
0000232A                          2361  -------------------- end include --------------------
0000232A                          2362      INCLUDE     "BitmapChunker.X68"
0000232A                          2363  
0000232A  =00000010               2364  BITMAP_ADDRESS          EQU 16              ; Long: Input bitmap address pointer
0000232A  =00000014               2365  CHUNK_START_POS         EQU 20              ; Long: Chunk start position (XXXXYYYY)
0000232A  =00000018               2366  CHUNK_WIDTH             EQU 24              ; Word: Chunk Width
0000232A  =0000001A               2367  CHUNK_HEIGHT            EQU 26              ; Word: Chunk Height
0000232A  =0000001C               2368  SCREEN_START_POS        EQU 28              ; Long: Screen start position (XXXXYYYY)
0000232A                          2369      ; Local Variables
0000232A  =00000000               2370  BITMAP_WIDTH            EQU 0               
0000232A  =00000004               2371  BITMAP_HEIGHT           EQU 4
0000232A  =00000008               2372  NEXT_LINE_OFFSET        EQU 8
0000232A  =0000000C               2373  LOCAL_VAR_TOTAL_BYTES   EQU 12
0000232A                          2374      ; Output: Screen update with drawn bitmap chunk
0000232A                          2375  DRAW_BITMAP_CHUNK:
0000232A  4FEF FFF4               2376      lea     (-LOCAL_VAR_TOTAL_BYTES)(sp), sp ; Allocate space for local variables
0000232E                          2377      
0000232E  206F 0010               2378      move.l  BITMAP_ADDRESS(sp), a0     
00002332                          2379       
00002332  43E8 001C               2380      lea     OFFSET_BITSPERPIXEL(a0), a1
00002336  3E11                    2381      move.w  (a1), d7
00002338  E05F                    2382      ror.w   #BITS_IN_BYTE, d7               ; Bits per pixel -> d7
0000233A                          2383      
0000233A  2C28 000A               2384      move.l  OFFSET_PIXELARRAY_OFFSET(a0), d6
0000233E  4846                    2385      swap    d6
00002340  E05E                    2386      ror.w   #BITS_IN_BYTE, d6
00002342                          2387      
00002342  2248                    2388      move.l  a0, a1                          ; Save to get width later
00002344  D1C6                    2389      adda.l  d6, a0                          ; Start+offset -> a0
00002346                          2390      
00002346                          2391      ; a0 = 
00002346                          2392      ; d7 = pixel size
00002346                          2393      ; Drawing bitmap ----------------------------------------------
00002346  262F 001C               2394      move.l  SCREEN_START_POS(sp), d3        ; x, y Screen start position
0000234A  3803                    2395      move.w  d3, d4                          ; y -> d4
0000234C  D86F 001A               2396      add.w   CHUNK_HEIGHT(sp), d4
00002350  5344                    2397      subi.w  #1, d4                          ; Inclusive pixel adjustment
00002352  4843                    2398      swap    d3                              ; x -> d3
00002354                          2399      
00002354  3A2F 0018               2400      move.w  CHUNK_WIDTH(sp), d5             ; x counter
00002358  5345                    2401      subi.w  #DBRA_ADJUSTMENT, d5            
0000235A  3C2F 001A               2402      move.w  CHUNK_HEIGHT(sp), d6            ; y counter
0000235E  5346                    2403      subi.w  #DBRA_ADJUSTMENT, d6
00002360                          2404      
00002360  2029 0016               2405      move.l  OFFSET_BITMAP_HEIGHT(a1), d0
00002364  E058                    2406      ror.w   #BITS_IN_BYTE, d0
00002366  4840                    2407      swap    d0
00002368  E058                    2408      ror.w   #BITS_IN_BYTE, d0               
0000236A  2F40 0004               2409      move.l  d0, BITMAP_HEIGHT(sp)           ; Save height locally
0000236E                          2410      
0000236E  2029 0012               2411      move.l  OFFSET_BITMAP_WIDTH(a1), d0   
00002372  E058                    2412      ror.w   #BITS_IN_BYTE, d0
00002374  4840                    2413      swap    d0
00002376  E058                    2414      ror.w   #BITS_IN_BYTE, d0               
00002378  2F40 0000               2415      move.l  d0, BITMAP_WIDTH(sp)            ; Save width locally
0000237C                          2416      
0000237C  E580                    2417      asl.l   #2, d0                          ; Width * 4 Convert to bytes 
0000237E  2F40 0008               2418      move.l  d0, NEXT_LINE_OFFSET(sp)        ; Setting up for creating new line offset
00002382                          2419  
00002382  222F 0014               2420      move.l  CHUNK_START_POS(sp), d1         ; x, y Chunk start position
00002386  3401                    2421      move.w  d1, d2                          ; y -> d2
00002388  4841                    2422      swap    d1                              ; x -> d1
0000238A  48C1                    2423      ext.l   d1
0000238C                          2424      
0000238C  4442                    2425      neg.w   d2
0000238E  48C2                    2426      ext.l   d2
00002390  D4AF 0004               2427      add.l   BITMAP_HEIGHT(sp), d2           
00002394  946F 001A               2428      sub.w   CHUNK_HEIGHT(sp), d2            ; Fix height from window space to pixel array space
00002398                          2429      
00002398  C0C2                    2430      mulu    d2, d0                          ; Y * Width
0000239A  D1C0                    2431      adda.l  d0, a0                          ; Starting y row
0000239C                          2432      
0000239C  E581                    2433      asl.l   #2, d1                          ; Chunk starting pos * 4
0000239E  D1C1                    2434      adda.l  d1, a0                          ; Starting x and y
000023A0                          2435      
000023A0  7200                    2436      moveq.l #0, d1
000023A2  322F 0018               2437      move.w  CHUNK_WIDTH(sp), d1
000023A6  E581                    2438      asl.l   #2, d1
000023A8  93AF 0008               2439      sub.l   d1, NEXT_LINE_OFFSET(sp)        ; Subtract chunk width from bitmap width
000023AC                          2440                                              ; to add after every new line
000023AC  3404                    2441      move.w  d4, d2                          ; Y Position
000023AE                          2442  
000023AE                          2443  DRAW_32BITMAP:
000023AE  7050                    2444      move.l  #SET_PEN_COLOR_TASK, d0
000023B0                          2445      ; Gets pixel color data
000023B0  2218                    2446      move.l  (a0)+, d1
000023B2  1201                    2447      move.b  d1, d1
000023B4  670A                    2448      beq.s   SKIP_DRAW_PIXEL
000023B6  E089                    2449      lsr.l   #BITS_IN_BYTE, d1           ; $00BBGGRR
000023B8  4E4F                    2450      trap    #15
000023BA                          2451  
000023BA                          2452      
000023BA  7052                    2453      move.l  #DRAW_PIXEL_TASK, d0        ; Draws pixel at current
000023BC  3203                    2454      move.w  d3, d1                      ; X Position and  
000023BE  4E4F                    2455      trap    #15                         
000023C0                          2456  
000023C0                          2457  SKIP_DRAW_PIXEL:
000023C0  5243                    2458      addi.w  #1, d3                      ; Increment X position
000023C2  51CD FFEA               2459      dbra    d5, DRAW_32BITMAP
000023C6                          2460  
000023C6  262F 001C               2461      move.l  (SCREEN_START_POS)(sp), d3  ; Reset X position -> d3
000023CA  4843                    2462      swap    d3
000023CC                          2463                                          ; Reset X loop dbra counter
000023CC  3A2F 0018               2464      move.w  CHUNK_WIDTH(sp), d5
000023D0  5345                    2465      subi.w  #DBRA_ADJUSTMENT, d5
000023D2                          2466      
000023D2  D1EF 0008               2467      adda.l  NEXT_LINE_OFFSET(sp), a0    ; Increment to new row
000023D6                          2468      
000023D6  5342                    2469      subi.w  #1, d2                      ; Decrement Y position
000023D8  51CE FFD4               2470      dbra    d6, DRAW_32BITMAP
000023DC                          2471      
000023DC                          2472      
000023DC                          2473  END_DRAW_BITMAP_CHUNK:   
000023DC                          2474                                          ; Deallocate LocalVars
000023DC  4FEF 000C               2475      lea     (LOCAL_VAR_TOTAL_BYTES)(sp), sp      
000023E0  4E75                    2476      rts
000023E2                          2477  
000023E2                          2478  
000023E2                          2479  
000023E2                          2480  
000023E2                          2481  
000023E2                          2482  
000023E2                          2483  
000023E2                          2484  
000023E2                          2485  
000023E2                          2486  
000023E2                          2487  
000023E2                          2488  
000023E2                          2489  
000023E2                          2490  
000023E2                          2491  -------------------- end include --------------------
000023E2                          2492      INCLUDE     "RoundingDivide.X68"
000023E2                          2493  
000023E2                          2494  ROUNDING_DIVIDE_REG             REG d0-d2
000023E2  =0000000C               2495  ROUNDING_DIVIDE_REG_SIZE        EQU BYTES_IN_LONG*3
000023E2                          2496  
000023E2  =00000010               2497  DIVIDEND                        EQU ROUNDING_DIVIDE_REG_SIZE+4
000023E2  =00000014               2498  DIVISOR                         EQU ROUNDING_DIVIDE_REG_SIZE+8
000023E2  =00000008               2499  ROUNDING_DIVIDE_PARAM_SIZE      EQU BYTES_IN_LONG*2
000023E2                          2500  
000023E2  =00000014               2501  ROUNDING_DIVIDE_RETURN_OFFSET   EQU ROUNDING_DIVIDE_REG_SIZE+ROUNDING_DIVIDE_PARAM_SIZE
000023E2                          2502  
000023E2                          2503  
000023E2                          2504  DIVIDE_WITH_ROUNDING:
000023E2  48E7 E000               2505      movem.l ROUNDING_DIVIDE_REG, -(sp)
000023E6  202F 0014               2506      move.l  (DIVISOR)(sp), d0
000023EA  222F 0010               2507      move.l  (DIVIDEND)(sp), d1
000023EE  2401                    2508      move.l  d1, d2
000023F0                          2509      
000023F0                          2510      ; Get remeinder
000023F0  84C0                    2511      divu    d0, d2
000023F2  343C 0000               2512      move.w  #0, d2
000023F6  4842                    2513      swap    d2
000023F8                          2514      
000023F8                          2515      
000023F8  D282                    2516      add.l   d2, d1
000023FA                          2517      
000023FA                          2518      ; Final Quotient
000023FA  82C0                    2519      divu    d0, d1
000023FC  4841                    2520      swap    d1
000023FE  323C 0000               2521      move.w  #0, d1
00002402  4841                    2522      swap    d1
00002404                          2523      
00002404  2F41 0014               2524      move.l  d1, ROUNDING_DIVIDE_RETURN_OFFSET(sp) ; Put in stack accessable outside of func
00002408                          2525                                                    ; using (RETURN)(sp)
00002408  4CDF 0007               2526      movem.l (sp)+, ROUNDING_DIVIDE_REG
0000240C  4E75                    2527      rts
0000240E                          2528  
0000240E                          2529  
0000240E                          2530  -------------------- end include --------------------
0000240E                          2531      INCLUDE     "SevenSegmentDisplay.X68"
0000240E                          2532  
0000240E  =00000040               2533  TARGET_NUMBER_OFFSET    EQU BYTES_IN_ALL_REG+4
0000240E                          2534  
0000240E                          2535  DRAW_TWO_DIGIT_NUMBER:
0000240E  48E7 FFFE               2536      movem.l ALL_REG, -(sp)
00002412                          2537      
00002412                          2538      ; Draw the Box that surround seven segment display
00002412  7050                    2539      move.l  #SET_PEN_COLOR_TASK, d0
00002414  223C 00FFFFFF           2540      move.l  #WHITE, d1
0000241A  4E4F                    2541      trap    #15
0000241C  7057                    2542      moveq.l #DRAW_RECT_TASK, d0
0000241E  223C 000001FC           2543      move.l  #(SEGMENT_ONES_PLACE_POS_X-SEGMENT_PLACE_X_OFFSET*2-SEGMENT_BACKGROUND_PADDING), d1
00002424  243C 000001A9           2544      move.l  #(SEGMENT_ONES_PLACE_POS_Y-SEGMENT_BACKGROUND_PADDING), d2
0000242A  263C 00000262           2545      move.l  #(SEGMENT_ONES_PLACE_POS_X+SEGMENT_LENGTH+SEGMENT_BACKGROUND_PADDING), d3
00002430  283C 000001DF           2546      move.l  #(SEGMENT_ONES_PLACE_POS_Y+SEGMENT_LENGTH*2+SEGMENT_BACKGROUND_PADDING), d4
00002436  4E4F                    2547      trap    #15
00002438                          2548  
00002438  7A00                    2549      moveq.l #0, d5                      ; Clear d5 for place value offsets
0000243A  7C00                    2550      moveq.l #0, d6                      ; Clear d6
0000243C  7E00                    2551      moveq.l #0, d7                      ; and d7 for segment encodings
0000243E                          2552  
0000243E  705D                    2553      moveq.l #SET_PEN_WIDTH_TASK, d0
00002440  7205                    2554      move.l  #SEGMENT_WIDTH, d1
00002442  4E4F                    2555      trap    #15                         ; Set segment width
00002444                          2556      
00002444  7050                    2557      moveq.l #SET_PEN_COLOR_TASK, d0
00002446  223C 00BE6D38           2558      move.l  #SEVEN_SEGMENT_NUMBER_COLOR, d1
0000244C  4E4F                    2559      trap    #15                         ; Set segment color
0000244E                          2560      
0000244E  242F 0040               2561      move.l  (TARGET_NUMBER_OFFSET)(sp), d2
00002452                          2562  
00002452                          2563      ; Get the place values from the target number
00002452  84FC 000A               2564      divu    #SEGMENT_NUMBER_BASE, d2    ; Divide by 10
00002456  3602                    2565      move.w  d2, d3                      
00002458  4842                    2566      swap    d2                          ; 1s   -> d2
0000245A                          2567      
0000245A  86FC 000A               2568      divu    #SEGMENT_NUMBER_BASE, d3
0000245E  3803                    2569      move.w  d3, d4                      ; 100s -> d4
00002460  4843                    2570      swap    d3                          ; 10s  -> d3
00002462                          2571      
00002462                          2572      ; Get encodings for each number
00002462  4BF9 0000261A           2573      lea     NumberSegmentEncoding, a5
00002468  1C35 2000               2574      move.b  (a5, d2.w), d6
0000246C  1E35 3000               2575      move.b  (a5, d3.w), d7
00002470  1835 4000               2576      move.b  (a5, d4.w), d4
00002474  C87C 00FF               2577      and.w   #$00FF, d4
00002478                          2578      
00002478                          2579      ; ONES ----------------------------------------------------------
00002478  4BF9 000025FC           2580      lea     SegmentRoutineTable, a5
0000247E  2C79 000025FC           2581      move.l  (SegmentRoutineTable), a6
00002484                          2582  SEVEN_SEGMENT_ONES_LOOP:
00002484  0806 0000               2583      btst    #0, d6                      ; Checks if lowest bit == 0
00002488  6700 0008               2584      beq     SKIP_SEGMENT_ONES_DRAW      ; Skips when lowest bit == 0
0000248C  3F04                    2585      move.w  d4, -(sp)
0000248E  4E96                    2586      jsr     (a6)
00002490  381F                    2587      move.w  (sp)+, d4
00002492                          2588      
00002492                          2589  SKIP_SEGMENT_ONES_DRAW:
00002492  588D                    2590      add.l   #BYTES_IN_LONG, a5
00002494  2C55                    2591      move.l  (a5), a6
00002496  E24E                    2592      lsr     #1, d6
00002498  BC3C 0000               2593      cmp.b   #0, d6                      ; Branch if remaining segments
0000249C  66E6                    2594      bne     SEVEN_SEGMENT_ONES_LOOP
0000249E                          2595      
0000249E                          2596      ; TENS ----------------------------------------------------------
0000249E  0685 00000023           2597      add.l   #SEGMENT_PLACE_X_OFFSET, d5
000024A4  4BF9 000025FC           2598      lea     SegmentRoutineTable, a5
000024AA  2C79 000025FC           2599      move.l  (SegmentRoutineTable), a6
000024B0                          2600  SEVEN_SEGMENT_TENS_LOOP:
000024B0  0807 0000               2601      btst    #0, d7                      ; Checks if lowest bit == 0
000024B4  6700 0008               2602      beq     SKIP_SEGMENT_TENS_DRAW      ; Skips when lowest bit == 0
000024B8  3F04                    2603      move.w  d4, -(sp)
000024BA  4E96                    2604      jsr     (a6)
000024BC  381F                    2605      move.w  (sp)+, d4
000024BE                          2606      
000024BE                          2607  SKIP_SEGMENT_TENS_DRAW:
000024BE  588D                    2608      add.l   #BYTES_IN_LONG, a5
000024C0  2C55                    2609      move.l  (a5), a6
000024C2  E24F                    2610      lsr     #1, d7
000024C4  BE3C 0000               2611      cmp.b   #0, d7              ; Branch if remaining segments
000024C8  66E6                    2612      bne     SEVEN_SEGMENT_TENS_LOOP  
000024CA                          2613      
000024CA                          2614      
000024CA                          2615  
000024CA                          2616      ; HUNDREDS ------------------------------------------------------
000024CA  0685 00000023           2617      add.l   #SEGMENT_PLACE_X_OFFSET, d5
000024D0  4BF9 000025FC           2618      lea     SegmentRoutineTable, a5
000024D6  2C79 000025FC           2619      move.l  (SegmentRoutineTable), a6
000024DC                          2620  SEVEN_SEGMENT_HUNDREDS_LOOP:
000024DC  0804 0000               2621      btst    #0, d4                      ; Checks if lowest bit == 0
000024E0  6700 0008               2622      beq     SKIP_SEGMENT_HUNDREDS_DRAW      ; Skips when lowest bit == 0
000024E4  3F04                    2623      move.w  d4, -(sp)
000024E6  4E96                    2624      jsr     (a6)
000024E8  381F                    2625      move.w  (sp)+, d4
000024EA                          2626      
000024EA                          2627  SKIP_SEGMENT_HUNDREDS_DRAW:
000024EA  588D                    2628      add.l   #BYTES_IN_LONG, a5
000024EC  2C55                    2629      move.l  (a5), a6
000024EE  E24C                    2630      lsr     #1, d4
000024F0  B83C 0000               2631      cmp.b   #0, d4              ; Branch if remaining segments
000024F4  66E6                    2632      bne     SEVEN_SEGMENT_HUNDREDS_LOOP 
000024F6                          2633    
000024F6                          2634      
000024F6  705D                    2635      moveq.l #SET_PEN_WIDTH_TASK, d0
000024F8  7201                    2636      move.l  #1, d1
000024FA  4E4F                    2637      trap    #15                         ; Reset width
000024FC  7050                    2638      moveq.l #SET_PEN_COLOR_TASK, d0
000024FE  223C 00FFFFFF           2639      move.l  #WHITE, d1
00002504  4E4F                    2640      trap    #15                         ; Reset segment color
00002506                          2641      
00002506  4CDF 7FFF               2642      movem.l (sp)+, ALL_REG
0000250A  4E75                    2643      rts
0000250C                          2644      
0000250C                          2645  A_SEGMENT:
0000250C  7054                    2646      moveq.l #DRAW_LINE_START_END_TASK, d0
0000250E  223C 00000247           2647      move.l  #SEGMENT_ONES_PLACE_POS_X, d1
00002514  9285                    2648      sub.l   d5, d1
00002516  243C 000001AE           2649      move.l  #SEGMENT_ONES_PLACE_POS_Y, d2
0000251C  263C 0000025D           2650      move.l  #(SEGMENT_ONES_PLACE_POS_X+SEGMENT_LENGTH), d3
00002522  9685                    2651      sub.l   d5, d3
00002524  283C 000001AE           2652      move.l  #SEGMENT_ONES_PLACE_POS_Y, d4
0000252A  4E4F                    2653      trap    #15
0000252C  4E75                    2654      rts
0000252E                          2655  
0000252E                          2656  B_SEGMENT:
0000252E  7054                    2657      moveq.l #DRAW_LINE_START_END_TASK, d0
00002530  223C 0000025D           2658      move.l  #(SEGMENT_ONES_PLACE_POS_X+SEGMENT_LENGTH), d1
00002536  9285                    2659      sub.l   d5, d1
00002538  243C 000001AE           2660      move.l  #SEGMENT_ONES_PLACE_POS_Y, d2
0000253E  263C 0000025D           2661      move.l  #(SEGMENT_ONES_PLACE_POS_X+SEGMENT_LENGTH), d3
00002544  9685                    2662      sub.l   d5, d3
00002546  283C 000001C4           2663      move.l  #(SEGMENT_ONES_PLACE_POS_Y+SEGMENT_LENGTH), d4
0000254C  4E4F                    2664      trap    #15
0000254E                          2665  
0000254E  4E75                    2666      rts
00002550                          2667  
00002550                          2668  C_SEGMENT:
00002550  7054                    2669      moveq.l #DRAW_LINE_START_END_TASK, d0
00002552  223C 0000025D           2670      move.l  #(SEGMENT_ONES_PLACE_POS_X+SEGMENT_LENGTH), d1
00002558  9285                    2671      sub.l   d5, d1
0000255A  243C 000001C4           2672      move.l  #(SEGMENT_ONES_PLACE_POS_Y+SEGMENT_LENGTH), d2
00002560  263C 0000025D           2673      move.l  #(SEGMENT_ONES_PLACE_POS_X+SEGMENT_LENGTH), d3
00002566  9685                    2674      sub.l   d5, d3
00002568  283C 000001DA           2675      move.l  #(SEGMENT_ONES_PLACE_POS_Y+SEGMENT_LENGTH*2), d4
0000256E  4E4F                    2676      trap    #15
00002570                          2677  
00002570  4E75                    2678      rts
00002572                          2679  
00002572                          2680  D_SEGMENT:
00002572  7054                    2681      moveq.l #DRAW_LINE_START_END_TASK, d0
00002574  223C 00000247           2682      move.l  #(SEGMENT_ONES_PLACE_POS_X), d1
0000257A  9285                    2683      sub.l   d5, d1
0000257C  243C 000001DA           2684      move.l  #(SEGMENT_ONES_PLACE_POS_Y+SEGMENT_LENGTH*2), d2
00002582  263C 0000025D           2685      move.l  #(SEGMENT_ONES_PLACE_POS_X+SEGMENT_LENGTH), d3
00002588  9685                    2686      sub.l   d5, d3
0000258A  283C 000001DA           2687      move.l  #(SEGMENT_ONES_PLACE_POS_Y+SEGMENT_LENGTH*2), d4
00002590  4E4F                    2688      trap    #15
00002592                          2689  
00002592  4E75                    2690      rts
00002594                          2691  
00002594                          2692  E_SEGMENT:
00002594  7054                    2693      moveq.l #DRAW_LINE_START_END_TASK, d0
00002596  223C 00000247           2694      move.l  #(SEGMENT_ONES_PLACE_POS_X), d1
0000259C  9285                    2695      sub.l   d5, d1
0000259E  243C 000001C4           2696      move.l  #(SEGMENT_ONES_PLACE_POS_Y+SEGMENT_LENGTH), d2
000025A4  263C 00000247           2697      move.l  #(SEGMENT_ONES_PLACE_POS_X), d3
000025AA  9685                    2698      sub.l   d5, d3
000025AC  283C 000001DA           2699      move.l  #(SEGMENT_ONES_PLACE_POS_Y+SEGMENT_LENGTH*2), d4
000025B2  4E4F                    2700      trap    #15
000025B4                          2701  
000025B4  4E75                    2702      rts
000025B6                          2703  
000025B6                          2704  F_SEGMENT:
000025B6  7054                    2705      moveq.l #DRAW_LINE_START_END_TASK, d0
000025B8  223C 00000247           2706      move.l  #(SEGMENT_ONES_PLACE_POS_X), d1
000025BE  9285                    2707      sub.l   d5, d1
000025C0  243C 000001AE           2708      move.l  #(SEGMENT_ONES_PLACE_POS_Y), d2
000025C6  263C 00000247           2709      move.l  #(SEGMENT_ONES_PLACE_POS_X), d3
000025CC  9685                    2710      sub.l   d5, d3
000025CE  283C 000001C4           2711      move.l  #(SEGMENT_ONES_PLACE_POS_Y+SEGMENT_LENGTH), d4
000025D4  4E4F                    2712      trap    #15
000025D6                          2713  
000025D6  4E75                    2714      rts
000025D8                          2715  
000025D8                          2716  G_SEGMENT:
000025D8  7054                    2717      moveq.l #DRAW_LINE_START_END_TASK, d0
000025DA  223C 00000247           2718      move.l  #(SEGMENT_ONES_PLACE_POS_X), d1
000025E0  9285                    2719      sub.l   d5, d1
000025E2  243C 000001C4           2720      move.l  #(SEGMENT_ONES_PLACE_POS_Y+SEGMENT_LENGTH), d2
000025E8  263C 0000025D           2721      move.l  #(SEGMENT_ONES_PLACE_POS_X+SEGMENT_LENGTH), d3
000025EE  9685                    2722      sub.l   d5, d3
000025F0  283C 000001C4           2723      move.l  #(SEGMENT_ONES_PLACE_POS_Y+SEGMENT_LENGTH), d4
000025F6  4E4F                    2724      trap    #15
000025F8                          2725  
000025F8  4E75                    2726      rts
000025FA                          2727      
000025FA= 0001                    2728                          dc.w    1
000025FC= 0000250C 0000252E ...   2729  SegmentRoutineTable     dc.l    A_SEGMENT, B_SEGMENT, C_SEGMENT, D_SEGMENT
0000260C= 00002594 000025B6 ...   2730                          dc.l    E_SEGMENT, F_SEGMENT, G_SEGMENT
00002618                          2731                          
00002618= 0001                    2732                          dc.w    1
0000261A= 3F 06 5B 4F 66          2733  NumberSegmentEncoding   dc.b    %00111111, %00000110, %01011011, %01001111, %01100110
0000261F= 6D 7D 07 7F 6F          2734                          dc.b    %01101101, %01111101, %00000111, %01111111, %01101111
00002624= 0001                    2735                          dc.w    1
00002626                          2736      
00002626                          2737  
00002626                          2738  
00002626                          2739  
00002626                          2740  
00002626                          2741  
00002626                          2742  
00002626                          2743  
00002626                          2744  
00002626                          2745  
00002626                          2746  
00002626                          2747  
00002626                          2748  
00002626                          2749  
00002626                          2750  
00002626                          2751  
00002626                          2752  
00002626                          2753  
00002626                          2754  
00002626                          2755  
00002626                          2756  
00002626                          2757  
00002626                          2758  
00002626                          2759  
00002626                          2760  
00002626                          2761  -------------------- end include --------------------
00002626                          2762      INCLUDE     "PerformanceStates.X68"
00002626                          2763  
00002626                          2764  DECREASE_PERFORMANCE:
00002626  48E7 FFFE               2765      movem.l  ALL_REG, -(sp)
0000262A                          2766      ; Check if negative modifier < -max, set to -max if true
0000262A  55B9 000027EE           2767      subi.l  #NEGATIVE_MODIFIER_INCREMENT, (PerformanceNegativeModifier)
00002630  0CB9 FFFFFFF6 000027EE  2768      cmp.l   #-MAX_PERFORMANCE_MODIFIER, (PerformanceNegativeModifier)
0000263A  6C00 000C               2769      bge     SKIP_SET_LOWEST_NEG_MODIFIER
0000263E                          2770      
0000263E  23FC FFFFFFF6 000027EE  2771      move.l  #-MAX_PERFORMANCE_MODIFIER, (PerformanceNegativeModifier)  
00002648                          2772    
00002648                          2773  SKIP_SET_LOWEST_NEG_MODIFIER:
00002648                          2774      ; Check if positive modifier < 0, set to 0 if true
00002648  55B9 000027EA           2775      subi.l  #NEGATIVE_MODIFIER_INCREMENT, (PerformancePositiveModifier)
0000264E  0CB9 00000000 000027EA  2776      cmp.l   #0, (PerformancePositiveModifier)
00002658  6C00 000C               2777      bge     SKIP_SET_LOWEST_POS_MODIFIER
0000265C                          2778      
0000265C  23FC 00000000 000027EA  2779      move.l  #0, (PerformancePositiveModifier)    
00002666                          2780  SKIP_SET_LOWEST_POS_MODIFIER:
00002666  2039 000027EE           2781      move.l  (PerformanceNegativeModifier), d0
0000266C  D1B9 000027F6           2782      add.l   d0, (PerformanceScore)
00002672  4EB9 000026D6           2783      jsr     HANDLE_PERFORMANCE 
00002678                          2784      
00002678  4CDF 7FFF               2785      movem.l (sp)+, ALL_REG
0000267C  4E75                    2786      rts
0000267E                          2787  
0000267E                          2788  INCREASE_PERFORMANCE:
0000267E  48E7 FFFE               2789      movem.l  ALL_REG, -(sp)
00002682                          2790      ; Check if positive modifier > max, set to max if true
00002682  54B9 000027EA           2791      addi.l  #POSITIVE_MODIFIER_INCREMENT, (PerformancePositiveModifier)
00002688  0CB9 0000000A 000027EA  2792      cmp.l   #MAX_PERFORMANCE_MODIFIER, (PerformancePositiveModifier)
00002692  6F00 000C               2793      ble     SKIP_SET_HIGHEST_POS_MODIFIER
00002696                          2794      
00002696  23FC 0000000A 000027EA  2795      move.l  #MAX_PERFORMANCE_MODIFIER, (PerformancePositiveModifier)  
000026A0                          2796    
000026A0                          2797  SKIP_SET_HIGHEST_POS_MODIFIER:
000026A0                          2798      ; Check if negative modifier > 0, set to 0 if true
000026A0  54B9 000027EE           2799      addi.l  #POSITIVE_MODIFIER_INCREMENT, (PerformanceNegativeModifier)
000026A6  0CB9 00000000 000027EE  2800      cmp.l   #0, (PerformanceNegativeModifier)
000026B0  6F00 000C               2801      ble     SKIP_SET_HIGHEST_NEG_MODIFIER
000026B4                          2802      
000026B4  23FC 00000000 000027EE  2803      move.l  #0, (PerformanceNegativeModifier)    
000026BE                          2804  SKIP_SET_HIGHEST_NEG_MODIFIER:
000026BE  2039 000027EA           2805      move.l  (PerformancePositiveModifier), d0
000026C4  D1B9 000027F6           2806      add.l   d0, (PerformanceScore)
000026CA  4EB9 000026D6           2807      jsr     HANDLE_PERFORMANCE
000026D0  4CDF 7FFF               2808      movem.l (sp)+, ALL_REG 
000026D4  4E75                    2809      rts
000026D6                          2810  
000026D6                          2811      
000026D6                          2812  HANDLE_PERFORMANCE:
000026D6  0CB9 0000008C 000027F6  2813      cmp.l   #(MAX_PERFORMANCE*PERFORMANCE_STATE_SCORE_SIZE), (PerformanceScore)
000026E0  6F00 000C               2814      ble     SKIP_SET_HIGHEST_PERFORMANCE
000026E4  23FC 0000008C 000027F6  2815      move.l  #(MAX_PERFORMANCE*PERFORMANCE_STATE_SCORE_SIZE), (PerformanceScore)
000026EE                          2816  SKIP_SET_HIGHEST_PERFORMANCE:
000026EE                          2817  
000026EE  2039 000027F6           2818      move.l  (PerformanceScore), d0
000026F4  80FC 0014               2819      divu    #PERFORMANCE_STATE_SCORE_SIZE, d0   ; Get Performance index
000026F8  E548                    2820      lsl     #2, d0                              ; Translate to number of bytes
000026FA                          2821      
000026FA  41F9 000027CA           2822      lea     PerformanceHandlingTable, a0
00002700  41F0 0000               2823      lea     (a0, d0), a0
00002704  2050                    2824      move.l  (a0), a0                            ; Get handle address from table
00002706                          2825      
00002706                          2826      
00002706  4E90                    2827      jsr (a0)                                    ; Call handle sub-routine
00002708  4E75                    2828      rts    
0000270A                          2829  
0000270A                          2830  HANDLE_LOST:  
0000270A                          2831      ; Stop song
0000270A  704D                    2832      moveq.l #CONTROL_DIRECTX_PLAYER_TASK, d0
0000270C  7200                    2833      moveq.l #CHOSEN_SONG_LOAD_NUMBER, d1
0000270E  7402                    2834      moveq.l #STOP_REFERENCED_SOUND, d2
00002710  4E4F                    2835      trap    #15
00002712                          2836      
00002712  4EB8 21D8               2837      jsr     GATO_JUMP
00002716  4EB8 1B9A               2838      jsr     SONG_ENDING_SEQUENCE
0000271A                          2839      
0000271A                          2840      ; Draw loss sticker
0000271A  2F3C 01B30159           2841      move.l  #WIN_LOSS_STICKER_SCREEN_POS, -(sp) ; Screen start Position
00002720  3F3C 002D               2842      move.w  #WIN_LOSS_STICKER_HEIGHT, -(sp)     ; Chunk height
00002724  3F3C 0023               2843      move.w  #WIN_LOSS_STICKER_WIDTH, -(sp)      ; Chunk width
00002728  2F3C 00000000           2844      move.l  #0, -(sp)                           ; Chunk start Position
0000272E  2F3C 00266696           2845      move.l  #LossSticker, -(sp)                 ; Bitmap Address 
00002734  4EB8 232A               2846      jsr     DRAW_BITMAP_CHUNK
00002738  4FEF 0010               2847      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp     ; Fix stack
0000273C                          2848      
0000273C                          2849      ; Draw loss banner
0000273C  2F3C 00D40005           2850      move.l  #END_BANNER_POS, -(sp)             ; Screen start Position
00002742  3F3C 005A               2851      move.w  #END_BANNER_HEIGHT, -(sp)          ; Chunk height
00002746  3F3C 00D8               2852      move.w  #END_BANNER_WIDTH, -(sp)           ; Chunk width
0000274A  2F3C 00000000           2853      move.l  #0, -(sp)                           ; Chunk start Position
00002750  2F3C 00270BA6           2854      move.l  #LossBanner, -(sp)                  ; Bitmap Address 
00002756  4EB8 232A               2855      jsr     DRAW_BITMAP_CHUNK
0000275A  4FEF 0010               2856      lea     BITMAP_CHUNK_PARAM_SIZE(sp), sp     ; Fix stack
0000275E                          2857      
0000275E                          2858      ;Update Screen
0000275E  705E                    2859      moveq.l #PAINT_BUFFER_SCREEN_TASK, d0
00002760  4E4F                    2860      trap    #15
00002762                          2861  
00002762                          2862      ; Set song finished and failed flags
00002762  13FC 0001 00002807      2863      move.b  #1, (SongFinished)
0000276A  23FC 00000001 0000280C  2864      move.l  #1, (SongFailed)
00002774                          2865  
00002774  4E75                    2866      rts
00002776                          2867      
00002776                          2868  HANDLE_TERRIBLE:
00002776  23FC 000000FF 000095EA  2869      move.l  #TERRIBLE_COLOR, (PlayAreaBoarderColor)
00002780  4E75                    2870      rts
00002782                          2871  
00002782                          2872  HANDLE_BAD:
00002782  23FC 000054FF 000095EA  2873      move.l  #BAD_COLOR, (PlayAreaBoarderColor)
0000278C  4E75                    2874      rts
0000278E                          2875      
0000278E                          2876  HANDLE_MEDIOCRE:
0000278E  23FC 0000A8FF 000095EA  2877      move.l  #MEDIOCRE_COLOR, (PlayAreaBoarderColor)
00002798  4E75                    2878      rts
0000279A                          2879      
0000279A                          2880  HANDLE_DECENT:
0000279A  23FC 0000FFFF 000095EA  2881      move.l  #DECENT_COLOR, (PlayAreaBoarderColor)
000027A4  4E75                    2882      rts
000027A6                          2883      
000027A6                          2884  HANDLE_GOOD:
000027A6  23FC 0000FF99 000095EA  2885      move.l  #GOOD_COLOR, (PlayAreaBoarderColor)
000027B0  4E75                    2886      rts
000027B2                          2887      
000027B2                          2888  HANDLE_EXCELLENT:
000027B2  23FC 0000FF00 000095EA  2889      move.l  #EXCELLENT_COLOR, (PlayAreaBoarderColor)
000027BC  4E75                    2890      rts
000027BE                          2891      
000027BE                          2892  HANDLE_MAX:
000027BE  23FC 00FFFF00 000095EA  2893      move.l  #MAX_COLOR, (PlayAreaBoarderColor)
000027C8  4E75                    2894      rts
000027CA                          2895                                      ; 0 - 19       20 - 39          40 - 59
000027CA= 0000270A 00002776 ...   2896  PerformanceHandlingTable    dc.l    HANDLE_LOST, HANDLE_TERRIBLE, HANDLE_BAD
000027D6                          2897                                      ; 60 - 79          80 - 99        100 - 119
000027D6= 0000278E 0000279A ...   2898                              dc.l    HANDLE_MEDIOCRE, HANDLE_DECENT, HANDLE_GOOD
000027E2                          2899                                      ; 120 - 139         140
000027E2= 000027B2 000027BE       2900                              dc.l    HANDLE_EXCELLENT, HANDLE_MAX
000027EA                          2901  
000027EA= 00000000                2902  PerformancePositiveModifier dc.l    0
000027EE= 00000000                2903  PerformanceNegativeModifier dc.l    0
000027F2                          2904      
000027F2                          2905                                      ; Initial Performance 
000027F2= 00000004                2906  CurrentPerformance          dc.l    PERFORMANCE_DECENT
000027F6                          2907                                      ; Initial Score
000027F6= 00000050                2908  PerformanceScore            dc.l    PERFORMANCE_STATE_SCORE_SIZE*PERFORMANCE_DECENT
000027FA                          2909  
000027FA                          2910  
000027FA                          2911  
000027FA                          2912  
000027FA                          2913  
000027FA                          2914  
000027FA                          2915  
000027FA                          2916  
000027FA                          2917  
000027FA                          2918  
000027FA                          2919  
000027FA                          2920  
000027FA                          2921  
000027FA                          2922  
000027FA                          2923  
000027FA                          2924  
000027FA                          2925  
000027FA                          2926  
000027FA                          2927  
000027FA                          2928  
000027FA                          2929  
000027FA                          2930  
000027FA                          2931  
000027FA                          2932  
000027FA                          2933  
000027FA                          2934  
000027FA                          2935  
000027FA                          2936  
000027FA                          2937  -------------------- end include --------------------
000027FA                          2938      
000027FA                          2939      
000027FA                          2940  
000027FA                          2941  ; Time Variables
000027FA                          2942  DeltaTime                   ds.l    1
000027FE                          2943  PreviousTime                ds.l    1
00002802= 00000000                2944  TimeElapsed                 dc.l    0
00002806                          2945  
00002806                          2946  ; Flags
00002806= 00                      2947  ReadyForGame                dc.b    0
00002807= 00                      2948  SongFinished                dc.b    0
00002808= 00000000                2949  HighscoreAchieved           dc.l    0
0000280C= 00000000                2950  SongFailed                  dc.l    0
00002810= 00000000                2951  RetrySong                   dc.l    0
00002814= 00000000                2952  LevelSelect                 dc.l    0
00002818= 00000000                2953  ExitGame                    dc.l    0
0000281C= 00 00 00 00 00          2954  InputFlags                  DCB.B   5,0
00002822                          2955                              ds.w    0                            
00002822= 00 00 00 00 00          2956  HeldInputs                  DCB.B   5,0
00002827                          2957  
00002827                          2958  ; Sound file Error message                     
00002827= 49 6E 63 6F 72 72 ...   2959  Error_WrongSOUNDSignature   dc.b    'Incorrect MIDI File Signature, SOND Required.', 0
00002855                          2960  
00002855                          2961  ; Sound Effects
00002855= 53 6F 75 6E 64 46 ...   2962  CassetteTapeStart           dc.b    'SoundFX/CassetteTapeStart.wav',0
00002873= 53 6F 75 6E 64 46 ...   2963  CassetteTapeButton          dc.b    'SoundFX/CassetteTapeButton.wav',0
00002892= 53 6F 75 6E 64 46 ...   2964  CassetteTapeRestart         dc.b    'SoundFX/CassetteTapeRestart.wav',0
000028B2= 53 6F 75 6E 64 46 ...   2965  CassetteTapeEject           dc.b    'SoundFX/CassetteTapeEject.wav',0
000028D0= 53 6F 75 6E 64 46 ...   2966  PencilWrite                 dc.b    'SoundFX/PencilWrite.wav',0
000028E8                          2967                              
000028E8= 53 6F 75 6E 64 46 ...   2968  MissedNoteFXString          dc.b    'SoundFX/MissSound.wav',0
000028FE= 53 6F 75 6E 64 46 ...   2969  Overstrum1String            dc.b    'SoundFX/Overstrum1.wav',0
00002915= 53 6F 75 6E 64 46 ...   2970  Overstrum2String            dc.b    'SoundFX/Overstrum2.wav',0
0000292C= 53 6F 75 6E 64 46 ...   2971  Overstrum3String            dc.b    'SoundFX/Overstrum3.wav',0
00002943= 53 6F 75 6E 64 46 ...   2972  Overstrum4String            dc.b    'SoundFX/Overstrum4.wav',0
0000295A= 53 6F 75 6E 64 46 ...   2973  Overstrum5String            dc.b    'SoundFX/Overstrum5.wav',0
00002971= 53 6F 75 6E 64 46 ...   2974  Overstrum6String            dc.b    'SoundFX/Overstrum6.wav',0
00002988= 000028FE 00002915 ...   2975  OverstrumSounds             dc.l    Overstrum1String, Overstrum2String, Overstrum3String
00002994= 00002943 0000295A ...   2976                              dc.l    Overstrum4String, Overstrum5String, Overstrum6String
000029A0                          2977  
000029A0                          2978  ; Song name strings
000029A0= 44 72 65 61 6D 73 ...   2979  DreamsName                  dc.b    'Dreams By: Fleetwood Mac',0
000029B9= 50 61 72 61 6C 79 ...   2980  ParalyzerName               dc.b    'Paralyzer By: Finger Eleven',0
000029D5= 50 6F 6E 64 65 72 ...   2981  PonderTheNightName          dc.b    'Ponder The Night By: Albert',0     
000029F1= 46 72 65 65 20 42 ...   2982  FreeBirdName                dc.b    'Free Bird By: Lynyrd Skynyrd',0    
00002A0E= 000029D5 000029A0 ...   2983  SongNames                   dc.l    PonderTheNightName, DreamsName, ParalyzerName, FreeBirdName
00002A1E                          2984  
00002A1E                          2985  ; Song path strings
00002A1E= 4D 75 73 69 63 2F ...   2986  DreamsString                dc.b    'Music/Dreams.wav',0
00002A2F= 4D 75 73 69 63 2F ...   2987  ParalyzerString             dc.b    'Music/Paralyzer.wav',0
00002A43= 4D 75 73 69 63 2F ...   2988  PonderTheNightString        dc.b    'Music/PonderTheNight.wav',0  
00002A5C= 4D 75 73 69 63 2F ...   2989  FreeBirdString              dc.b    'Music/FreeBird.wav',0                        
00002A70= 00002A43 00002A1E ...   2990  SongStrings                 dc.l    PonderTheNightString, DreamsString, ParalyzerString, FreeBirdString                 
00002A80                          2991  
00002A80                          2992  ; Song Sound files
00002A80                          2993  DreamsSound                 INCBIN  "Music/Dreams.SOUND"
00002E60                          2994                              ds.w    0
00002E60                          2995  ParalyzerSound              INCBIN  "Music/Paralyzer.SOUND"
000036D6                          2996                              ds.w    0
000036D6                          2997  PonderTheNightSound         INCBIN  "Music/PonderTheNight.SOUND"  
000038E0                          2998                              ds.w    0
000038E0                          2999  FreeBirdSound               INCBIN  "Music/FreeBird.SOUND"                     
00004684= 000036D6 00002A80 ...   3000  SongSounds                  dc.l    PonderTheNightSound, DreamsSound, ParalyzerSound, FreeBirdSound
00004694                          3001  
00004694                          3002  ; Index for the currently hovered song on main menu
00004694= 00000000                3003  CurrentChoiceIndex          dc.l    0
00004698                          3004  
00004698                          3005  ; Song to load when picked in main menu
00004698                          3006  ChosenSong                  ds.l    1
0000469C                          3007  ChosenSound                 ds.l    1
000046A0                          3008       
000046A0                          3009  ; Note spawn time variables/tables                       
000046A0                          3010  SongLane1Timings            ds.b    (SongLane1Timings-PonderThenightSound)
0000566A= 000046A0                3011  CurrentLane1Timing          dc.l    SongLane1Timings
0000566E                          3012  
0000566E                          3013  SongLane2Timings            ds.b    (SongLane1Timings-PonderThenightSound)
00006638= 0000566E                3014  CurrentLane2Timing          dc.l    SongLane2Timings
0000663C                          3015  
0000663C                          3016  SongLane3Timings            ds.b    (SongLane1Timings-PonderThenightSound)
00007606= 0000663C                3017  CurrentLane3Timing          dc.l    SongLane3Timings
0000760A                          3018  
0000760A                          3019  SongLane4Timings            ds.b    (SongLane1Timings-PonderThenightSound)
000085D4= 0000760A                3020  CurrentLane4Timing          dc.l    SongLane4Timings
000085D8                          3021  
000085D8                          3022  SongLane5Timings            ds.b    (SongLane1Timings-PonderThenightSound)
000095A2= 000085D8                3023  CurrentLane5Timing          dc.l    SongLane5Timings
000095A6                          3024  
000095A6= 00000000 000046A0 ...   3025  SongLaneTimingTable         dc.l    0, SongLane1Timings, SongLane2Timings, SongLane3Timings, SongLane4Timings, SongLane5Timings
000095BE= 0000566A 00006638       3026  CurrentLaneTimings          dc.l    CurrentLane1Timing, CurrentLane2Timing
000095C6= 00007606 000085D4 ...   3027                              dc.l    CurrentLane3Timing, CurrentLane4Timing, CurrentLane5Timing
000095D2                          3028  
000095D2                          3029  ; Gameplay Variables                     
000095D2                          3030  TotalNotes                      ds.l    1
000095D6                          3031  NoteSpawnOffsetTime             ds.l    1
000095DA                          3032  NoteSpeedPixelCentiSecond       ds.l    1
000095DE                          3033                              
000095DE= 00000000                3034  CurrentCombo                    dc.l    0
000095E2                          3035  
000095E2                          3036  ProgressSpeedPixelCentiSecond   ds.l    1
000095E6= 00017700                3037  ProgressBarFillHeightPos        dc.l    PROGRESS_BAR_BOTTOM_Y<<FIXED_POINT_BITS
000095EA                          3038  
000095EA= 0000FFFF                3039  PlayAreaBoarderColor            dc.l    DECENT_COLOR
000095EE                          3040  
000095EE                          3041  ; Note Position variables/tables
000095EE= FFFFDB00 FFFFDB00 ...   3042  Lane1NotePosTable           DCB.l   ((SongLane1Timings-PonderThenightSound)/4),NOTE_SPAWN_Y<<FIXED_POINT_BITS
0000A5B6= 00000000                3043  OldestLane1NoteOffset       dc.l    0
0000A5BA= 000095EE                3044  Lane1CurrentNote            dc.l    Lane1NotePosTable
0000A5BE= FFFFFFFF                3045  Lane1CurrentNoteIndex       dc.l    -1
0000A5C2                          3046  
0000A5C2= FFFFDB00 FFFFDB00 ...   3047  Lane2NotePosTable           DCB.l   ((SongLane1Timings-PonderThenightSound)/4),NOTE_SPAWN_Y<<FIXED_POINT_BITS
0000B58A= 00000000                3048  OldestLane2NoteOffset       dc.l    0
0000B58E= 0000A5C2                3049  Lane2CurrentNote            dc.l    Lane2NotePosTable
0000B592= FFFFFFFF                3050  Lane2CurrentNoteIndex       dc.l    -1
0000B596                          3051  
0000B596= FFFFDB00 FFFFDB00 ...   3052  Lane3NotePosTable           DCB.l   ((SongLane1Timings-PonderThenightSound)/4),NOTE_SPAWN_Y<<FIXED_POINT_BITS
0000C55E= 00000000                3053  OldestLane3NoteOffset       dc.l    0
0000C562= 0000B596                3054  Lane3CurrentNote            dc.l    Lane3NotePosTable
0000C566= FFFFFFFF                3055  Lane3CurrentNoteIndex       dc.l    -1
0000C56A                          3056  
0000C56A= FFFFDB00 FFFFDB00 ...   3057  Lane4NotePosTable           DCB.l   ((SongLane1Timings-PonderThenightSound)/4),NOTE_SPAWN_Y<<FIXED_POINT_BITS
0000D532= 00000000                3058  OldestLane4NoteOffset       dc.l    0
0000D536= 0000C56A                3059  Lane4CurrentNote            dc.l    Lane4NotePosTable
0000D53A= FFFFFFFF                3060  Lane4CurrentNoteIndex       dc.l    -1
0000D53E                          3061  
0000D53E= FFFFDB00 FFFFDB00 ...   3062  Lane5NotePosTable           DCB.l   ((SongLane1Timings-PonderThenightSound)/4),NOTE_SPAWN_Y<<FIXED_POINT_BITS
0000E506= 00000000                3063  OldestLane5NoteOffset       dc.l    0
0000E50A= 0000D53E                3064  Lane5CurrentNote            dc.l    Lane5NotePosTable
0000E50E= FFFFFFFF                3065  Lane5CurrentNoteIndex       dc.l    -1
0000E512                          3066  
0000E512= 000095EE 0000A5C2 ...   3067  LanePosTables               dc.l    Lane1NotePosTable, Lane2NotePosTable, Lane3NotePosTable, Lane4NotePosTable, Lane5NotePosTable
0000E526                          3068  
0000E526= 0000A5B6 0000B58A       3069  OldestLaneNotes             dc.l    OldestLane1NoteOffset, OldestLane2NoteOffset
0000E52E= 0000C55E 0000D532 ...   3070                              dc.l    OldestLane3NoteOffset, OldestLane4NoteOffset, OldestLane5NoteOffset
0000E53A                          3071                              
0000E53A= 0000A5BA 0000B58E       3072  LaneCurrentNotes            dc.l    Lane1CurrentNote, Lane2CurrentNote
0000E542= 0000C562 0000D536 ...   3073                              dc.l    Lane3CurrentNote, Lane4CurrentNote, Lane5CurrentNote
0000E54E                          3074                              
0000E54E= 0000A5BE 0000B592       3075  LaneCurrentNoteIndexs       dc.l    Lane1CurrentNoteIndex, Lane2CurrentNoteIndex
0000E556= 0000C566 0000D53A ...   3076                              dc.l    Lane3CurrentNoteIndex, Lane4CurrentNoteIndex, Lane5CurrentNoteIndex
0000E562                          3077                              
0000E562= 43 6F 75 6C 64 6E ...   3078  ExitMessageString           dc.b    'Couldn',APOSTROPHE,'t Handle The Heat Huh?',0 
0000E580= 0000                    3079                              dc.w    0
0000E582                          3080  
0000E582                          3081  ; Bitmaps
0000E582                          3082  LevelBackground             INCBIN  "Bitmaps/Level.bmp"
0013A60C                          3083  TitleImage                  INCBIN  "Bitmaps/Title.bmp"
00266696                          3084  
00266696                          3085  LossSticker                 INCBIN  "Bitmaps/LossSticker.bmp"
00267FBC                          3086  WinSticker                  INCBIN  "Bitmaps/WinSticker.bmp"
002698E2                          3087      
002698E2                          3088  GatoAsleep                  INCBIN  "Bitmaps/GatoAsleep.bmp"
0026CFCC                          3089  GatoMad                     INCBIN  "Bitmaps/MadGato.bmp"
00270BA6                          3090  
00270BA6                          3091  LossBanner                  INCBIN  "Bitmaps/SongFailed.bmp"
00283BF0                          3092  WinBanner                   INCBIN  "Bitmaps/WinBanner.bmp"
00296C3A                          3093  
00296C3A                          3094  DifficultySkull             INCBIN  "Bitmaps/DifficultySkull.bmp"
00298424                          3095  
00298424                          3096  
00298424                          3097  
00298424                          3098      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_REG             7FFF
APOSTROPHE          27
A_SEGMENT           250C
BACKGROUND_FILL_HEIGHT_1  20
BACKGROUND_FILL_HEIGHT_2  8
BACKGROUND_FILL_HEIGHT_3  13
BACKGROUND_FILL_POS_1  15E0177
BACKGROUND_FILL_POS_2  16B0177
BACKGROUND_FILL_POS_3  177017F
BACKGROUND_FILL_WIDTH_1  D
BACKGROUND_FILL_WIDTH_2  15
BACKGROUND_FILL_WIDTH_3  9
BAD_COLOR           54FF
BESTCOMBOSTRING     2015
BITMAP_ADDRESS      10
BITMAP_CHUNK_PARAM_SIZE  10
BITMAP_HEIGHT       4
BITMAP_WIDTH        0
BITS_IN_BYTE        8
BITS_IN_WORD        10
BLACK               0
BYTES_IN_ALL_REG    3C
BYTES_IN_LONG       4
BYTES_IN_SEGMENT_PARAMS  4
B_SEGMENT           252E
CASSETTETAPEBUTTON  2873
CASSETTETAPEEJECT   28B2
CASSETTETAPERESTART  2892
CASSETTETAPESTART   2855
CASSETTE_START_LOAD_NUMBER  A
CHOSENSONG          4698
CHOSENSOUND         469C
CHOSEN_SONG_LOAD_NUMBER  0
CHUNK_HEIGHT        1A
CHUNK_START_POS     14
CHUNK_WIDTH         18
CLEAR_SCREEN_CODE   FF00
CLEAR_SCREEN_TASK   B
CLOSE_ALL_FILES_TASK  32
CLOSE_FILE_TASK     38
COMPLETIONDATA      21C2
COMPLETION_PERCENT_OFFSET  12
COMPLETION_TEXT_X   AA
COMPLETION_TEXT_Y   172
CONTROL_DIRECTX_PLAYER_TASK  4D
CORRECT_SOUND_SIGNATURE  13A0
CURRENTCHOICEINDEX  4694
CURRENTCOMBO        95DE
CURRENTLANE1TIMING  566A
CURRENTLANE2TIMING  6638
CURRENTLANE3TIMING  7606
CURRENTLANE4TIMING  85D4
CURRENTLANE5TIMING  95A2
CURRENTLANETIMINGS  95BE
CURRENTPERFORMANCE  27F2
C_SEGMENT           2550
DBRA_ADJUSTMENT     1
DECENT_COLOR        FFFF
DECREASE_PERFORMANCE  2626
DELAY_TASK          17
DELETE_FILE_TASK    39
DELETE_SONG_INFORMATION  2116
DELTATIME           27FA
DIFFICULTYSKULL     296C3A
DIFFICULTY_SKULL_HEIGHT  2C
DIFFICULTY_SKULL_PADDING  2
DIFFICULTY_SKULL_WIDTH  22
DIFFICUTLY_SKULL_POS  1860163
DISPLAY_STATS       1C0C
DIVIDEND            10
DIVIDE_WITH_ROUNDING  23E2
DIVISOR             14
DRAW_32BITMAP       23AE
DRAW_BITMAP_CHUNK   232A
DRAW_FILLED_OVAL_TASK  57
DRAW_GATO           2254
DRAW_LINE_START_END_TASK  54
DRAW_LOOP           17BA
DRAW_NOTES          1740
DRAW_NOTE_LANE1     185A
DRAW_NOTE_LANE2     18BC
DRAW_NOTE_LANE3     1926
DRAW_NOTE_LANE4     1998
DRAW_NOTE_LANE5     1A0A
DRAW_NOTE_ROUTINE_TABLE  1B86
DRAW_PIXEL_TASK     52
DRAW_PLAY_AREA_STATIC_ELEMENTS  1A7C
DRAW_RECT_TASK      57
DRAW_TWO_DIGIT_NUMBER  240E
DRAW_UNFILLED_RECT_TASK  5A
DREAMSNAME          29A0
DREAMSSOUND         2A80
DREAMSSTRING        2A1E
D_SEGMENT           2572
EMPTYFILEDATA       21C3
EMPTY_FILE_LENGTH   14
ENABLE_DOUBLE_BUFFER_CODE  11
ENDBESTCOMBO        1FD6
ENDNOTESHIT         1FCE
ENDNOTESMISSED      1FD2
ENDOVERSTRUMS       1FDA
ENDTOTALNOTES       1FCA
END_BANNER_HEIGHT   5A
END_BANNER_POS      D40005
END_BANNER_WIDTH    D8
END_DRAW_BITMAP_CHUNK  23DC
END_GAME_LOOP       1D48
ERROR_WRONGSOUNDSIGNATURE  2827
EXCELLENT_COLOR     FF00
EXITGAME            2818
EXITGAMESTRING      2080
EXITMESSAGESTRING   E562
EXIT_GAME_OFFSET    C8
EXIT_IMAGE_HEIGHT   1E0
EXIT_IMAGE_POS      3E0000
EXIT_IMAGE_WIDTH    205
EXIT_TEXT_OFFSET    96
E_SEGMENT           2594
FILEID              21BE
FILE_NOT_FOUND      FFFFFFFF
FILE_SIGNATURE      424D
FINISH_COLLISION_CHECK  173E
FINISH_DRAW_NOTES   1814
FINISH_LEVEL_LOOP   165E
FIVE_PRESSED_INPUT  35
FIXED_POINT_BITS    8
FLOOD_FILL_TASK     59
FOUR_NOT_PRESSED_TITLE  12A8
FOUR_PRESSED_BIT_OFFSET  0
FREEBIRDNAME        29F1
FREEBIRDSOUND       38E0
FREEBIRDSTRING      2A5C
F_SEGMENT           25B6
GATOASLEEP          2698E2
GATOMAD             26CFCC
GATOX               22D2
GATOY               22CE
GATO_CHUNK_HEIGHT   20
GATO_CHUNK_WIDTH    22
GATO_FULL_HEIGHT    3A
GATO_FULL_WIDTH     3C
GATO_JUMP           21D8
GATO_JUMP_ACCELERATION  FFFFFA00
GATO_MAX_FRAMES     8
GATO_SCREEN_START_POS  15E0177
GATO_START_POS      0
GENERATE_RANDOM_NUMBER_SEED  22F0
GET_DELTA_TIME      22D6
GET_RANDOM_0_5_D7   22FC
GET_TIME_TASK       8
GOOD_COLOR          FF99
GRAVITY_ACCELERATION  1
G_SEGMENT           25D8
HAMMER_Y            156
HANDLE_BAD          2782
HANDLE_DECENT       279A
HANDLE_EXCELLENT    27B2
HANDLE_GOOD         27A6
HANDLE_LOST         270A
HANDLE_MAX          27BE
HANDLE_MEDIOCRE     278E
HANDLE_PERFORMANCE  26D6
HANDLE_TERRIBLE     2776
HELDINPUTS          2822
HIGHSCOREACHIEVED   2808
HIGHSCORESTRING     2040
HIGHSCORE_TEXT_X    AA
HIGHSCORE_TEXT_Y    163
INCREASE_PERFORMANCE  267E
INITIALIZE_GAME     10DA
INITIALIZE_SOUNDS   1382
INPUTFLAGS          281C
INPUT_NUM_TASK      4
KEY_INPUT_TASK      13
KEY_INPUT_TIMEOUT   FFFF
LANE1CURRENTNOTE    A5BA
LANE1CURRENTNOTEINDEX  A5BE
LANE1NOTEPOSTABLE   95EE
LANE1_HAMMER_COLOR  FF3F3F
LANE1_X             60
LANE2CURRENTNOTE    B58E
LANE2CURRENTNOTEINDEX  B592
LANE2NOTEPOSTABLE   A5C2
LANE2_HAMMER_COLOR  3FFF43
LANE2_X             8E
LANE3CURRENTNOTE    C562
LANE3CURRENTNOTEINDEX  C566
LANE3NOTEPOSTABLE   B596
LANE3_HAMMER_COLOR  433FFF
LANE3_X             BC
LANE4CURRENTNOTE    D536
LANE4CURRENTNOTEINDEX  D53A
LANE4NOTEPOSTABLE   C56A
LANE4_HAMMER_COLOR  75FF
LANE4_X             EA
LANE5CURRENTNOTE    E50A
LANE5CURRENTNOTEINDEX  E50E
LANE5NOTEPOSTABLE   D53E
LANE5_HAMMER_COLOR  FFFF
LANE5_X             118
LANECURRENTNOTEINDEXS  E54E
LANECURRENTNOTES    E53A
LANEPOSTABLES       E512
LANE_OFFSET         2E
LEFT_SCREEN_MARGIN  0
LEVELBACKGROUND     E582
LEVELSELECT         2814
LEVELSELECTSTRING   2072
LEVEL_LOOP          1582
LEVEL_SELECT_OFFSET  50
LEVEL_TARGET_INPUTS  31323334
LOADINGSTRING       157A
LOAD_DIRECTX_SOUND_TASK  4A
LOAD_LEVEL          14BA
LOCAL_VAR_TOTAL_BYTES  C
LOSSBANNER          270BA6
LOSSSTICKER         266696
MAD_GATO_BACKGROUND_HEIGHT  3E
MAD_GATO_HEIGHT     34
MAD_GATO_WIDTH      49
MAIN_MENU_FONT_STYLE  4080001
MAX_COLOR           FFFF00
MAX_NOTES           3FFF
MAX_PERFORMANCE     7
MAX_PERFORMANCE_MODIFIER  A
MAX_SONGS_INDEX     C
MEDIOCRE_COLOR      A8FF
MISSEDNOTEFXSTRING  28E8
MOVE_GATO           2206
NEGATIVE_MODIFIER_INCREMENT  2
NEXT_LANE_TIMING_TABLE  1F88
NEXT_LINE_OFFSET    8
NEXT_NOTE_POSITION_TABLE  1F5A
NINC0               2306
NINC1               230E
NOTESHITSTRING      1FFE
NOTESMISSEDSTRING   2008
NOTESPAWNOFFSETTIME  95D6
NOTESPEEDPIXELCENTISECOND  95DA
NOTE_MISSED         16FA
NOTE_PRESSED_EVENT  90
NOTE_SIZE           19
NOTE_SPAWN_Y        FFFFFFDB
NOTE_WIDTH          28
NO_NOTE_PRESSED     147E
NUMBERSEGMENTENCODING  261A
OFFSET_BITMAP_HEIGHT  16
OFFSET_BITMAP_WIDTH  12
OFFSET_BITSPERPIXEL  1C
OFFSET_EVENTS_AMOUNT  A
OFFSET_KEYPRESS_AMOUNT  C
OFFSET_PIXELARRAY_OFFSET  A
OFFSET_SOUND_QUARTER_NOTE_TICKS  4
OFFSET_SOUND_TEMPO  6
OFFSET_START_NOTE_EVENTS  E
OLDESTLANE1NOTEOFFSET  A5B6
OLDESTLANE2NOTEOFFSET  B58A
OLDESTLANE3NOTEOFFSET  C55E
OLDESTLANE4NOTEOFFSET  D532
OLDESTLANE5NOTEOFFSET  E506
OLDESTLANENOTES     E526
ONE_NOT_PRESSED_END  1D86
ONE_NOT_PRESSED_TITLE  121C
ONE_PRESSED_BIT_OFFSET  18
OPEN_COMPLETION_FILE  2156
OPEN_EXISTING_FILE_TASK  33
OPEN_NEW_FILE_TASK  34
OVERSTRUM1STRING    28FE
OVERSTRUM2STRING    2915
OVERSTRUM3STRING    292C
OVERSTRUM4STRING    2943
OVERSTRUM5STRING    295A
OVERSTRUM6STRING    2971
OVERSTRUMSOUNDS     2988
OVERSTRUMSSTRING    2020
PAINT_BUFFER_SCREEN_TASK  5E
PARALYZERNAME       29B9
PARALYZERSOUND      2E60
PARALYZERSTRING     2A2F
PENCILWRITE         28D0
PERCENT_POS_X       E6
PERCENT_POS_Y       181
PERFORMANCEHANDLINGTABLE  27CA
PERFORMANCENEGATIVEMODIFIER  27EE
PERFORMANCEPOSITIVEMODIFIER  27EA
PERFORMANCESCORE    27F6
PERFORMANCE_BAD     2
PERFORMANCE_DECENT  4
PERFORMANCE_EXCELLENT  6
PERFORMANCE_GOOD    5
PERFORMANCE_LOST    0
PERFORMANCE_MEDIOCRE  3
PERFORMANCE_STATE_SCORE_SIZE  14
PERFORMANCE_TERRIBLE  1
PLAYAREABOARDERCOLOR  95EA
PLAY_AREA_BORDER_WIDTH  5
PLAY_AREA_BOTTOM_Y  17B
PLAY_AREA_LEFT_X    32
PLAY_AREA_RIGHT_X   14A
PLAY_AREA_TOP_Y     0
PLAY_LOADED_DIRECTX_TASK  4B
PLAY_SOUND_DIRECTX_TASK  49
PLAY_SOUND_ONCE     0
PONDERTHENIGHTNAME  29D5
PONDERTHENIGHTSOUND  36D6
PONDERTHENIGHTSTRING  2A43
POSITION_FILE_TASK  37
POSITIVE_MODIFIER_INCREMENT  2
PREVIOUSTIME        27FE
PRINT_CR_LF_TASK    D
PRINT_SIGNED_NUMBER_TASK  14
PRINT_STRING_PIXEL_POS_TASK  5F
PROCESS_END_INPUTS  1D5A
PROCESS_EVENTS      1420
PROCESS_INPUTS      1660
PROCESS_TITLE_INPUTS  11A8
PROGRESSBARFILLHEIGHTPOS  95E6
PROGRESSSPEEDPIXELCENTISECOND  95E2
PROGRESS_BACKGROUND_COLOR  323232
PROGRESS_BAR_BOTTOM_Y  177
PROGRESS_BAR_LEFT_X  244
PROGRESS_BAR_RIGHT_X  276
PROGRESS_BAR_TOP_Y  A
PROGRESS_FILL_COLOR  FFFFFF
QUARTER_LINE_X1     32
QUARTER_LINE_X2     14A
RANDOMNUMBERSEED    2326
READYFORGAME        2806
READ_FILE_TASK      35
READ_SONG_INFORMATION  212C
REFRESH_TITLE_SCREEN  12AA
REPLAYSTRING        2069
REPLAY_SONG         1016
REPORTCOMPLETIONSTRING  2052
RESET_LANE_TIMING   1FA2
RESET_LEVEL_DATA    1DB6
RESET_NOTE_POSITIONS  1F72
RETRYSONG           2810
RETURN              FFFFFFFC
ROUNDING_DIVIDE_PARAM_SIZE  8
ROUNDING_DIVIDE_REG  7
ROUNDING_DIVIDE_REG_SIZE  C
ROUNDING_DIVIDE_RETURN_OFFSET  14
RUN_END_GAME_LOOP   109E
RUN_MAIN_GAME_LOOP  1022
RUN_TITLE_LOOP      1006
SAVE_SONG_INFORMATION  208C
SCREEN_HEIGHT       1E0
SCREEN_START_POS    1C
SCREEN_WIDTH        280
SEGMENTROUTINETABLE  25FC
SEGMENT_BACKGROUND_PADDING  5
SEGMENT_LENGTH      16
SEGMENT_NUMBER_BASE  A
SEGMENT_ONES_PLACE_POS_X  247
SEGMENT_ONES_PLACE_POS_Y  1AE
SEGMENT_PLACE_X_OFFSET  23
SEGMENT_WIDTH       5
SET_CURSOR_TASK     B
SET_DRAWING_MODE_TASK  5C
SET_FONT_PROPERTIES_TASK  15
SET_PEN_COLOR_TASK  50
SET_PEN_FILL_COLOR_TASK  51
SET_PEN_WIDTH_TASK  5D
SEVEN_SEGMENT_BACKGROUND_COLOR  361F10
SEVEN_SEGMENT_HUNDREDS_LOOP  24DC
SEVEN_SEGMENT_NUMBER_COLOR  BE6D38
SEVEN_SEGMENT_ONES_LOOP  2484
SEVEN_SEGMENT_TENS_LOOP  24B0
SIZE_WINDOW_TASK    21
SKIP_CREATE_FILE    219A
SKIP_DECREASE_CHOICE_INDEX  121C
SKIP_DISPLAY_HIGHSCORE_MESSAGE  1D34
SKIP_DRAW_PIXEL     23C0
SKIP_INCREASE_CHOICE_INDEX  129A
SKIP_NEGATION       16AE
SKIP_REMOVE_NOTE    180E
SKIP_SEGMENT_HUNDREDS_DRAW  24EA
SKIP_SEGMENT_ONES_DRAW  2492
SKIP_SEGMENT_TENS_DRAW  24BE
SKIP_SET_FINISH_FLAG  161E
SKIP_SET_HIGHEST_NEG_MODIFIER  26BE
SKIP_SET_HIGHEST_PERFORMANCE  26EE
SKIP_SET_HIGHEST_POS_MODIFIER  26A0
SKIP_SET_LOWEST_NEG_MODIFIER  2648
SKIP_SET_LOWEST_POS_MODIFIER  2666
SKIP_SET_MAX_COMBO  16D4
SKIP_SET_NEW_SCORE  210A
SKIP_VARIABLE_LENGTH_CONVERSION  143E
SONGCOMPLETIONFILE  21A2
SONGCOMPLETIONSTRING  137A
SONGFAILED          280C
SONGFINISHED        2807
SONGLANE1TIMINGS    46A0
SONGLANE2TIMINGS    566E
SONGLANE3TIMINGS    663C
SONGLANE4TIMINGS    760A
SONGLANE5TIMINGS    85D8
SONGLANETIMINGTABLE  95A6
SONGNAMES           2A0E
SONGSOUNDS          4684
SONGSTRINGS         2A70
SONG_ENDING_SEQUENCE  1B9A
SONG_NAME_POS_X     CD
SONG_NAME_POS_Y     131
SOUND_FILE_SIGNATURE  534F4E44
START               1000
START_DRAW_LOOP     179C
START_OF_ASCII_NUMBERS  30
STATS               1FDE
STATSTRINGS         202C
STATS_BOXES_TOP_PADDING  14
STATS_FONT_COLOR    BF6D35
STATS_INNER_BOX_HEIGHT  B4
STATS_INNER_BOX_WIDTH  12C
STATS_INNER_FONT_STYLE  4140001
STATS_INNER_NUMBER_COLUMNS  3
STATS_INNER_NUMBER_X  18
STATS_INNER_NUMBER_Y  4
STATS_INNER_NUMBER_Y_OFFSET  2
STATS_INNER_TEXT_LINE_SIZE  37
STATS_INNER_TEXT_PADDING  8
STATS_INNER_TEXT_TOP_PAD  6
STATS_INNER_TEXT_X  AA
STATS_INNER_TEXT_Y  65
STATS_OUTER_BOX_HEIGHT  14A
STATS_OUTER_BOX_WIDTH  14A
STATS_OUTER_FONT_STYLE  4090001
STATS_OUTER_TEXT_X  AA
STATS_OUTER_TEXT_Y  186
STAT_STRING_AMOUNT  5
STOP_ALL_SOUNDS     3
STOP_REFERENCED_SOUND  2
TARGET_LINE_X1      32
TARGET_LINE_X2      14A
TARGET_LINE_Y       156
TARGET_NUMBER_OFFSET  40
TERRIBLE_COLOR      FF
THREE_NOT_PRESSED_END  1DB4
THREE_NOT_PRESSED_TITLE  129A
THREE_PRESSED_BIT_OFFSET  8
TIMEELAPSED         2802
TITLEIMAGE          13A60C
TITLE_LOOP          1186
TOP_LEFT            0
TOTALNOTES          95D2
TOTALNOTESSTRING    1FF2
TWO_NOT_PRESSED_END  1DA2
TWO_NOT_PRESSED_TITLE  1236
TWO_PRESSED_BIT_OFFSET  10
UPDATE_GATO         223C
UPDATE_PROGRESS_BAR  1816
WHITE               FFFFFF
WINBANNER           283BF0
WINSTICKER          267FBC
WIN_LOSS_STICKER_HEIGHT  2D
WIN_LOSS_STICKER_SCREEN_POS  1B30159
WIN_LOSS_STICKER_WIDTH  23
WRITE_FILE_TASK     36
